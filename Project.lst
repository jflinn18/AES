Microsoft (R) Macro Assembler Version 14.00.23026.0	    12/08/15 17:02:02
AddTwo.asm						     Page 1 - 1



				; Program Desription:
				; Author:
				; Creation Date:
				; Revisions:
				; Date: 0 0 0 0Modified by: 0 0 Changes:
				;




				;http://www.adamberent.com/documents/AESbyExample.pdf






				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 


				mAddRoundKey MACRO State, expKey   ; expKey is the 16 bytes of the Expanded Key
					mov ecx, 16
				L1:
					mov al, expKey[ecx]
					xor State[ecx], al 
					loop L1

				ENDM


				mByteSub MACRO State:REQ
					mov ecx, 16

				L2:
					mov eax, 0

					mov al, State[ecx-1]; lower nibble
					mov esi, OFFSET sbox
					add esi, eax
					mov bl, BYTE PTR [esi]
					mov State[ecx-1], bl

					loop L2

				ENDM

				mSwap MACRO y:REQ, x:REQ
					push eax
					mov al, y
					mov ah, x
					mov y, ah
					mov x, al
					pop eax
				ENDM

				mShiftMatrix MACRO

					mSwap matrix[2], matrix[3]
					mSwap matrix[1], matrix[2]
					mSwap matrix[0], matrix[1]

				ENDM

 00000000			.data
				; S-Box Lookup Table
 00000000 63 7C 77 7B F2	sbox	BYTE	063h, 07Ch, 077h, 07Bh, 0F2h, 06Bh, 06Fh, 0C5h, 030h, 001h, 067h, 02Bh, 0FEh, 0D7h, 0ABh, 076h 
	   6B 6F C5 30 01
	   67 2B FE D7 AB
	   76
 00000010  CA 82 C9 7D FA			BYTE	0CAh, 082h, 0C9h, 07Dh, 0FAh, 059h, 047h, 0F0h, 0ADh, 0D4h, 0A2h, 0AFh, 09Ch, 0A4h, 072h, 0C0h 
	   59 47 F0 AD D4
	   A2 AF 9C A4 72
	   C0
 00000020  B7 FD 93 26 36			BYTE	0B7h, 0FDh, 093h, 026h, 036h, 03Fh, 0F7h, 0CCh, 034h, 0A5h, 0E5h, 0F1h, 071h, 0D8h, 031h, 015h 
	   3F F7 CC 34 A5
	   E5 F1 71 D8 31
	   15
 00000030  04 C7 23 C3 18			BYTE	004h, 0C7h, 023h, 0C3h, 018h, 096h, 005h, 09Ah, 007h, 012h, 080h, 0E2h, 0EBh, 027h, 0B2h, 075h
	   96 05 9A 07 12
	   80 E2 EB 27 B2
	   75
 00000040  09 83 2C 1A 1B			BYTE	009h, 083h, 02Ch, 01Ah, 01Bh, 06Eh, 05Ah, 0A0h, 052h, 03Bh, 0D6h, 0B3h, 029h, 0E3h, 02Fh, 084h
	   6E 5A A0 52 3B
	   D6 B3 29 E3 2F
	   84
 00000050  53 D1 00 ED 20			BYTE	053h, 0D1h, 000h, 0EDh, 020h, 0FCh, 0B1h, 05Bh, 06Ah, 0CBh, 0BEh, 039h, 04Ah, 04Ch, 058h, 0CFh
	   FC B1 5B 6A CB
	   BE 39 4A 4C 58
	   CF
 00000060  D0 EF AA FB 43			BYTE	0D0h, 0EFh, 0AAh, 0FBh, 043h, 04Dh, 033h, 085h, 045h, 0F9h, 002h, 07Fh, 050h, 03Ch, 09Fh, 0A8h
	   4D 33 85 45 F9
	   02 7F 50 3C 9F
	   A8
 00000070  51 A3 40 8F 92			BYTE	051h, 0A3h, 040h, 08Fh, 092h, 09Dh, 038h, 0F5h, 0BCh, 0B6h, 0DAh, 021h, 010h, 0FFh, 0F3h, 0D2h
	   9D 38 F5 BC B6
	   DA 21 10 FF F3
	   D2
 00000080  CD 0C 13 EC 5F			BYTE	0CDh, 00Ch, 013h, 0ECh, 05Fh, 097h, 044h, 017h, 0C4h, 0A7h, 07Eh, 03Dh, 064h, 05Dh, 019h, 073h
	   97 44 17 C4 A7
	   7E 3D 64 5D 19
	   73
 00000090  60 81 4F DC 22			BYTE	060h, 081h, 04Fh, 0DCh, 022h, 02Ah, 090h, 088h, 046h, 0EEh, 0B8h, 014h, 0DEh, 05Eh, 00Bh, 0DBh
	   2A 90 88 46 EE
	   B8 14 DE 5E 0B
	   DB
 000000A0  E0 32 3A 0A 49			BYTE	0E0h, 032h, 03Ah, 00Ah, 049h, 006h, 024h, 05Ch, 0C2h, 0D3h, 0ACh, 062h, 091h, 095h, 0E4h, 079h
	   06 24 5C C2 D3
	   AC 62 91 95 E4
	   79
 000000B0  E7 C8 37 6D 8D			BYTE	0E7h, 0C8h, 037h, 06Dh, 08Dh, 0D5h, 04Eh, 0A9h, 06Ch, 056h, 0F4h, 0EAh, 065h, 07Ah, 0AEh, 008h
	   D5 4E A9 6C 56
	   F4 EA 65 7A AE
	   08
 000000C0  BA 78 25 2E 1C			BYTE	0BAh, 078h, 025h, 02Eh, 01Ch, 0A6h, 0B4h, 0C6h, 0E8h, 0DDh, 074h, 01Fh, 04Bh, 0BDh, 08Bh, 08Ah
	   A6 B4 C6 E8 DD
	   74 1F 4B BD 8B
	   8A
 000000D0  70 3E B5 66 48			BYTE	070h, 03Eh, 0B5h, 066h, 048h, 003h, 0F6h, 00Eh, 061h, 035h, 057h, 0B9h, 086h, 0C1h, 01Dh, 09Eh
	   03 F6 0E 61 35
	   57 B9 86 C1 1D
	   9E
 000000E0  E1 F8 98 11 69			BYTE	0E1h, 0F8h, 098h, 011h, 069h, 0D9h, 08Eh, 094h, 09Bh, 01Eh, 087h, 0E9h, 0CEh, 055h, 028h, 0DFh
	   D9 8E 94 9B 1E
	   87 E9 CE 55 28
	   DF
 000000F0  8C A1 89 0D BF			BYTE	08Ch, 0A1h, 089h, 00Dh, 0BFh, 0E6h, 042h, 068h, 041h, 099h, 02Dh, 00Fh, 0B0h, 054h, 0BBh, 016h
	   E6 42 68 41 99
	   2D 0F B0 54 BB
	   16
				; S-Box Inverse Lookup Table
 00000100 52 09 6A D5 30	sboxinv	BYTE	052h, 009h, 06Ah, 0D5h, 030h, 036h, 0A5h, 038h, 0BFh, 040h, 0A3h, 09Eh, 081h, 0F3h, 0D7h, 0FBh
	   36 A5 38 BF 40
	   A3 9E 81 F3 D7
	   FB
 00000110  7C E3 39 82 9B			BYTE	07Ch, 0E3h, 039h, 082h, 09Bh, 02Fh, 0FFh, 087h, 034h, 08Eh, 043h, 044h, 0C4h, 0DEh, 0E9h, 0CBh
	   2F FF 87 34 8E
	   43 44 C4 DE E9
	   CB
 00000120  54 7B 94 32 A6			BYTE	054h, 07Bh, 094h, 032h, 0A6h, 0C2h, 023h, 03Dh, 0EEh, 04Ch, 095h, 00Bh, 042h, 0FAh, 0C3h, 04Eh
	   C2 23 3D EE 4C
	   95 0B 42 FA C3
	   4E
 00000130  08 2E A1 66 28			BYTE	008h, 02Eh, 0A1h, 066h, 028h, 0D9h, 024h, 0B2h, 076h, 05Bh, 0A2h, 049h, 06Dh, 08Bh, 0D1h, 025h
	   D9 24 B2 76 5B
	   A2 49 6D 8B D1
	   25
 00000140  72 F8 F6 64 86			BYTE	072h, 0F8h, 0F6h, 064h, 086h, 068h, 098h, 016h, 0D4h, 0A4h, 05Ch, 0CCh, 05Dh, 065h, 0B6h, 092h
	   68 98 16 D4 A4
	   5C CC 5D 65 B6
	   92
 00000150  6C 70 48 50 FD			BYTE	06Ch, 070h, 048h, 050h, 0FDh, 0EDh, 0B9h, 0DAh, 05Eh, 015h, 046h, 057h, 0A7h, 08Dh, 09Dh, 084h
	   ED B9 DA 5E 15
	   46 57 A7 8D 9D
	   84
 00000160  90 D8 AB 00 8C			BYTE	090h, 0D8h, 0ABh, 000h, 08Ch, 0BCh, 0D3h, 00Ah, 0F7h, 0E4h, 058h, 005h, 0B8h, 0B3h, 045h, 006h
	   BC D3 0A F7 E4
	   58 05 B8 B3 45
	   06
 00000170  D0 2C 1E 8F CA			BYTE	0D0h, 02Ch, 01Eh, 08Fh, 0CAh, 03Fh, 00Fh, 002h, 0C1h, 0AFh, 0BDh, 003h, 001h, 013h, 08Ah, 06Bh
	   3F 0F 02 C1 AF
	   BD 03 01 13 8A
	   6B
 00000180  3A 91 11 41 4F			BYTE	03Ah, 091h, 011h, 041h, 04Fh, 067h, 0DCh, 0EAh, 097h, 0F2h, 0CFh, 0CEh, 0F0h, 0B4h, 0E6h, 073h
	   67 DC EA 97 F2
	   CF CE F0 B4 E6
	   73
 00000190  96 AC 74 22 E7			BYTE	096h, 0ACh, 074h, 022h, 0E7h, 0ADh, 035h, 085h, 0E2h, 0F9h, 037h, 0E8h, 01Ch, 075h, 0DFh, 06Eh
	   AD 35 85 E2 F9
	   37 E8 1C 75 DF
	   6E
 000001A0  47 F1 1A 71 1D			BYTE	047h, 0F1h, 01Ah, 071h, 01Dh, 029h, 0C5h, 089h, 06Fh, 0B7h, 062h, 00Eh, 0AAh, 018h, 0BEh, 01Bh
	   29 C5 89 6F B7
	   62 0E AA 18 BE
	   1B
 000001B0  FC 56 3E 4B C6			BYTE	0FCh, 056h, 03Eh, 04Bh, 0C6h, 0D2h, 079h, 020h, 09Ah, 0DBh, 0C0h, 0FEh, 078h, 0CDh, 05Ah, 0F4h
	   D2 79 20 9A DB
	   C0 FE 78 CD 5A
	   F4
 000001C0  1F DD A8 33 88			BYTE	01Fh, 0DDh, 0A8h, 033h, 088h, 007h, 0C7h, 031h, 0B1h, 012h, 010h, 059h, 027h, 080h, 0ECh, 05Fh
	   07 C7 31 B1 12
	   10 59 27 80 EC
	   5F
 000001D0  60 51 7F A9 19			BYTE	060h, 051h, 07Fh, 0A9h, 019h, 0B5h, 04Ah, 00Dh, 02Dh, 0E5h, 07Ah, 09Fh, 093h, 0C9h, 09Ch, 0EFh
	   B5 4A 0D 2D E5
	   7A 9F 93 C9 9C
	   EF
 000001E0  A0 E0 3B 4D AE			BYTE	0A0h, 0E0h, 03Bh, 04Dh, 0AEh, 02Ah, 0F5h, 0B0h, 0C8h, 0EBh, 0BBh, 03Ch, 083h, 053h, 099h, 061h
	   2A F5 B0 C8 EB
	   BB 3C 83 53 99
	   61
 000001F0  17 2B 04 7E BA			BYTE	017h, 02Bh, 004h, 07Eh, 0BAh, 077h, 0D6h, 026h, 0E1h, 069h, 014h, 063h, 055h, 021h, 00Ch, 07Dh
	   77 D6 26 E1 69
	   14 63 55 21 0C
	   7D
				;E Lookup Table
 00000200 01 03 05 0F 11	etable	BYTE	001h, 003h, 005h, 00Fh, 011h, 033h, 055h, 0FFh, 01Ah, 02Eh, 072h, 096h, 0A1h, 0F8h, 013h, 035h
	   33 55 FF 1A 2E
	   72 96 A1 F8 13
	   35
 00000210  5F E1 38 48 D8			BYTE	05Fh, 0E1h, 038h, 048h, 0D8h, 073h, 095h, 0A4h, 0F7h, 002h, 006h, 00Ah, 01Eh, 022h, 066h, 0AAh
	   73 95 A4 F7 02
	   06 0A 1E 22 66
	   AA
 00000220  E5 34 5C E4 37			BYTE	0E5h, 034h, 05Ch, 0E4h, 037h, 059h, 0EBh, 026h, 06Ah, 0BEh, 0D9h, 070h, 090h, 0ABh, 0E6h, 031h
	   59 EB 26 6A BE
	   D9 70 90 AB E6
	   31
 00000230  53 F5 04 0C 14			BYTE	053h, 0F5h, 004h, 00Ch, 014h, 03Ch, 044h, 0CCh, 04Fh, 0D1h, 068h, 0B8h, 0D3h, 06Eh, 0B2h, 0CDh
	   3C 44 CC 4F D1
	   68 B8 D3 6E B2
	   CD
 00000240  4C D4 67 A9 E0			BYTE	04Ch, 0D4h, 067h, 0A9h, 0E0h, 03Bh, 04Dh, 0D7h, 062h, 0A6h, 0F1h, 008h, 018h, 028h, 078h, 088h
	   3B 4D D7 62 A6
	   F1 08 18 28 78
	   88
 00000250  83 9E B9 D0 6B			BYTE	083h, 09Eh, 0B9h, 0D0h, 06Bh, 0BDh, 0DCh, 07Fh, 081h, 098h, 0B3h, 0CEh, 049h, 0DBh, 076h, 09Ah
	   BD DC 7F 81 98
	   B3 CE 49 DB 76
	   9A
 00000260  B5 C4 57 F9 10			BYTE	0B5h, 0C4h, 057h, 0F9h, 010h, 030h, 050h, 0F0h, 00Bh, 01Dh, 027h, 069h, 0BBh, 0D6h, 061h, 0A3h
	   30 50 F0 0B 1D
	   27 69 BB D6 61
	   A3
 00000270  FE 19 2B 7D 87			BYTE	0FEh, 019h, 02Bh, 07Dh, 087h, 092h, 0ADh, 0ECh, 02Fh, 071h, 093h, 0AEh, 0E9h, 020h, 060h, 0A0h
	   92 AD EC 2F 71
	   93 AE E9 20 60
	   A0
 00000280  FB 16 3A 4E D2			BYTE	0FBh, 016h, 03Ah, 04Eh, 0D2h, 06Dh, 0B7h, 0C2h, 05Dh, 0E7h, 032h, 056h, 0FAh, 015h, 03Fh, 041h
	   6D B7 C2 5D E7
	   32 56 FA 15 3F
	   41
 00000290  C3 5E E2 3D 47			BYTE	0C3h, 05Eh, 0E2h, 03Dh, 047h, 0C9h, 040h, 0C0h, 05Bh, 0EDh, 02Ch, 074h, 09Ch, 0BFh, 0DAh, 075h
	   C9 40 C0 5B ED
	   2C 74 9C BF DA
	   75
 000002A0  9F BA D5 64 AC			BYTE	09Fh, 0BAh, 0D5h, 064h, 0ACh, 0EFh, 02Ah, 07Eh, 082h, 09Dh, 0BCh, 0DFh, 07Ah, 08Eh, 089h, 080h
	   EF 2A 7E 82 9D
	   BC DF 7A 8E 89
	   80
 000002B0  9B B6 C1 58 E8			BYTE	09Bh, 0B6h, 0C1h, 058h, 0E8h, 023h, 065h, 0AFh, 0EAh, 025h, 06Fh, 0B1h, 0C8h, 043h, 0C5h, 054h
	   23 65 AF EA 25
	   6F B1 C8 43 C5
	   54
 000002C0  FC 1F 21 63 A5			BYTE	0FCh, 01Fh, 021h, 063h, 0A5h, 0F4h, 007h, 009h, 01Bh, 02Dh, 077h, 099h, 0B0h, 0CBh, 046h, 0CAh
	   F4 07 09 1B 2D
	   77 99 B0 CB 46
	   CA
 000002D0  45 CF 4A DE 79			BYTE	045h, 0CFh, 04Ah, 0DEh, 079h, 08Bh, 086h, 091h, 0A8h, 0E3h, 03Eh, 042h, 0C6h, 051h, 0F3h, 00Eh
	   8B 86 91 A8 E3
	   3E 42 C6 51 F3
	   0E
 000002E0  12 36 5A EE 29			BYTE	012h, 036h, 05Ah, 0EEh, 029h, 07Bh, 08Dh, 08Ch, 08Fh, 08Ah, 085h, 094h, 0A7h, 0F2h, 00Dh, 017h
	   7B 8D 8C 8F 8A
	   85 94 A7 F2 0D
	   17
 000002F0  39 4B DD 7C 84			BYTE	039h, 04Bh, 0DDh, 07Ch, 084h, 097h, 0A2h, 0FDh, 01Ch, 024h, 06Ch, 0B4h, 0C7h, 052h, 0F6h, 001h
	   97 A2 FD 1C 24
	   6C B4 C7 52 F6
	   01
				;L Lookup Table
 00000300 00 00 19 01 32	ltable	BYTE	000h, 000h, 019h, 001h, 032h, 002h, 01Ah, 0C6h, 04Bh, 0C7h, 01Bh, 068h, 033h, 0EEh, 0DFh, 003h
	   02 1A C6 4B C7
	   1B 68 33 EE DF
	   03
 00000310  64 04 E0 0E 34			BYTE	064h, 004h, 0E0h, 00Eh, 034h, 08Dh, 081h, 0EFh, 04Ch, 071h, 008h, 0C8h, 0F8h, 069h, 01Ch, 0C1h
	   8D 81 EF 4C 71
	   08 C8 F8 69 1C
	   C1
 00000320  7D C2 1D B5 F9			BYTE	07Dh, 0C2h, 01Dh, 0B5h, 0F9h, 0B9h, 027h, 06Ah, 04Dh, 0E4h, 0A6h, 072h, 09Ah, 0C9h, 009h, 078h
	   B9 27 6A 4D E4
	   A6 72 9A C9 09
	   78
 00000330  65 2F 8A 05 21			BYTE	065h, 02Fh, 08Ah, 005h, 021h, 00Fh, 0E1h, 024h, 012h, 0F0h, 082h, 045h, 035h, 093h, 0DAh, 08Eh
	   0F E1 24 12 F0
	   82 45 35 93 DA
	   8E
 00000340  96 8F DB BD 36			BYTE	096h, 08Fh, 0DBh, 0BDh, 036h, 0D0h, 0CEh, 094h, 013h, 05Ch, 0D2h, 0F1h, 040h, 046h, 083h, 038h
	   D0 CE 94 13 5C
	   D2 F1 40 46 83
	   38
 00000350  66 DD FD 30 BF			BYTE	066h, 0DDh, 0FDh, 030h, 0BFh, 006h, 08Bh, 062h, 0B3h, 025h, 0E2h, 098h, 022h, 088h, 091h, 010h
	   06 8B 62 B3 25
	   E2 98 22 88 91
	   10
 00000360  7E 6E 48 C3 A3			BYTE	07Eh, 06Eh, 048h, 0C3h, 0A3h, 0B6h, 01Eh, 042h, 03Ah, 06Bh, 028h, 054h, 0FAh, 085h, 03Dh, 0BAh
	   B6 1E 42 3A 6B
	   28 54 FA 85 3D
	   BA
 00000370  2B 79 0A 15 9B			BYTE	02Bh, 079h, 00Ah, 015h, 09Bh, 09Fh, 05Eh, 0CAh, 04Eh, 0D4h, 0ACh, 0E5h, 0F3h, 073h, 0A7h, 057h
	   9F 5E CA 4E D4
	   AC E5 F3 73 A7
	   57
 00000380  AF 58 A8 50 F4			BYTE	0AFh, 058h, 0A8h, 050h, 0F4h, 0EAh, 0D6h, 074h, 04Fh, 0AEh, 0E9h, 0D5h, 0E7h, 0E6h, 0ADh, 0E8h
	   EA D6 74 4F AE
	   E9 D5 E7 E6 AD
	   E8
 00000390  2C D7 75 7A EB			BYTE	02Ch, 0D7h, 075h, 07Ah, 0EBh, 016h, 00Bh, 0F5h, 059h, 0CBh, 05Fh, 0B0h, 09Ch, 0A9h, 051h, 0A0h
	   16 0B F5 59 CB
	   5F B0 9C A9 51
	   A0
 000003A0  7F 0C F6 6F 17			BYTE	07Fh, 00Ch, 0F6h, 06Fh, 017h, 0C4h, 049h, 0ECh, 0D8h, 043h, 01Fh, 02Dh, 0A4h, 076h, 07Bh, 0B7h
	   C4 49 EC D8 43
	   1F 2D A4 76 7B
	   B7
 000003B0  CC BB 3E 5A FB			BYTE	0CCh, 0BBh, 03Eh, 05Ah, 0FBh, 060h, 0B1h, 086h, 03Bh, 052h, 0A1h, 06Ch, 0AAh, 055h, 029h, 09Dh
	   60 B1 86 3B 52
	   A1 6C AA 55 29
	   9D
 000003C0  97 B2 87 90 61			BYTE	097h, 0B2h, 087h, 090h, 061h, 0BEh, 0DCh, 0FCh, 0BCh, 095h, 0CFh, 0CDh, 037h, 03Fh, 05Bh, 0D1h
	   BE DC FC BC 95
	   CF CD 37 3F 5B
	   D1
 000003D0  53 39 84 3C 41			BYTE	053h, 039h, 084h, 03Ch, 041h, 0A2h, 06Dh, 047h, 014h, 02Ah, 09Eh, 05Dh, 056h, 0F2h, 0D3h, 0ABh
	   A2 6D 47 14 2A
	   9E 5D 56 F2 D3
	   AB
 000003E0  44 11 92 D9 23			BYTE	044h, 011h, 092h, 0D9h, 023h, 020h, 02Eh, 089h, 0B4h, 07Ch, 0B8h, 026h, 077h, 099h, 0E3h, 0A5h
	   20 2E 89 B4 7C
	   B8 26 77 99 E3
	   A5
 000003F0  67 4A ED DE C5			BYTE	067h, 04Ah, 0EDh, 0DEh, 0C5h, 031h, 0FEh, 018h, 00Dh, 063h, 08Ch, 080h, 0C0h, 0F7h, 070h, 007h
	   31 FE 18 0D 63
	   8C 80 C0 F7 70
	   07

 00000400  00000004 [		State BYTE 4 DUP(0d4h,0bfh,05dh,030h)
	    D4 BF 5D 30
	   ]
 00000410  00000010 [		temp BYTE 16 DUP(0)
	    00
	   ]
 00000420 02 03 01 01		matrix BYTE 2,3,1,1
 00000424 00			zero BYTE 0
 00000000			.code


				;--------------
 00000000			pSwap PROC USES eax ebx ecx edx y:PTR BYTE, x:PTR BYTE
				;--------------
 00000000  55		   *	    push   ebp
 00000001  8B EC	   *	    mov    ebp, esp
 00000003  50		   *	    push   eax
 00000004  53		   *	    push   ebx
 00000005  51		   *	    push   ecx
 00000006  52		   *	    push   edx
 00000007  8B 55 08			mov edx, y
 0000000A  8A 02			mov al, [edx]
 0000000C  8B 4D 0C			mov ecx, x
 0000000F  8A 19			mov bl, [ecx]
 00000011  88 1A			mov [edx], bl
 00000013  88 01			mov [ecx], al
					ret
 00000015  5A		   *	    pop    edx
 00000016  59		   *	    pop    ecx
 00000017  5B		   *	    pop    ebx
 00000018  58		   *	    pop    eax
 00000019  C9		   *	    leave  
 0000001A  C2 0008	   *	    ret    00008h
 0000001D			pSwap ENDP


				;----------------------------
 0000001D			pShiftRow PROC
				; Requires = Nothing
				;----------------------------
				mSwap State[1], State[5]
 0000001D  50		     1		push eax
 0000001E  A0 00000401 R     1		mov al, State[1]
 00000023  8A 25 00000405 R  1		mov ah, State[5]
 00000029  88 25 00000401 R  1		mov State[1], ah
 0000002F  A2 00000405 R     1		mov State[5], al
 00000034  58		     1		pop eax
				mSwap State[5], State[9]
 00000035  50		     1		push eax
 00000036  A0 00000405 R     1		mov al, State[5]
 0000003B  8A 25 00000409 R  1		mov ah, State[9]
 00000041  88 25 00000405 R  1		mov State[5], ah
 00000047  A2 00000409 R     1		mov State[9], al
 0000004C  58		     1		pop eax
				mSwap State[9], State[13]
 0000004D  50		     1		push eax
 0000004E  A0 00000409 R     1		mov al, State[9]
 00000053  8A 25 0000040D R  1		mov ah, State[13]
 00000059  88 25 00000409 R  1		mov State[9], ah
 0000005F  A2 0000040D R     1		mov State[13], al
 00000064  58		     1		pop eax

				mSwap State[2], State[10]
 00000065  50		     1		push eax
 00000066  A0 00000402 R     1		mov al, State[2]
 0000006B  8A 25 0000040A R  1		mov ah, State[10]
 00000071  88 25 00000402 R  1		mov State[2], ah
 00000077  A2 0000040A R     1		mov State[10], al
 0000007C  58		     1		pop eax
				mSwap State[6], State[14]
 0000007D  50		     1		push eax
 0000007E  A0 00000406 R     1		mov al, State[6]
 00000083  8A 25 0000040E R  1		mov ah, State[14]
 00000089  88 25 00000406 R  1		mov State[6], ah
 0000008F  A2 0000040E R     1		mov State[14], al
 00000094  58		     1		pop eax

				mSwap State[15], State[11]
 00000095  50		     1		push eax
 00000096  A0 0000040F R     1		mov al, State[15]
 0000009B  8A 25 0000040B R  1		mov ah, State[11]
 000000A1  88 25 0000040F R  1		mov State[15], ah
 000000A7  A2 0000040B R     1		mov State[11], al
 000000AC  58		     1		pop eax
				mSwap State[11], State[7]
 000000AD  50		     1		push eax
 000000AE  A0 0000040B R     1		mov al, State[11]
 000000B3  8A 25 00000407 R  1		mov ah, State[7]
 000000B9  88 25 0000040B R  1		mov State[11], ah
 000000BF  A2 00000407 R     1		mov State[7], al
 000000C4  58		     1		pop eax
				mSwap State[7], State[3]
 000000C5  50		     1		push eax
 000000C6  A0 00000407 R     1		mov al, State[7]
 000000CB  8A 25 00000403 R  1		mov ah, State[3]
 000000D1  88 25 00000407 R  1		mov State[7], ah
 000000D7  A2 00000403 R     1		mov State[3], al
 000000DC  58		     1		pop eax

 000000DD  C3			 ret
 000000DE			pShiftRow ENDP

				;------------------------------
 000000DE			pMultGalois PROC USES esi ebx edx a:BYTE, b:BYTE
				; Returns = in al
				;------------------------------
 000000DE  55		   *	    push   ebp
 000000DF  8B EC	   *	    mov    ebp, esp
 000000E1  56		   *	    push   esi
 000000E2  53		   *	    push   ebx
 000000E3  52		   *	    push   edx
 000000E4  B8 00000000		mov eax, 0
 000000E9  BE 00000300 R	mov esi, OFFSET ltable
 000000EE  8A 45 08		mov al, a
 000000F1  03 F0		add esi, eax
 000000F3  8A 1E		mov bl, BYTE PTR [esi]

 000000F5  8A D3		mov dl, bl

 000000F7  B8 00000000		mov eax,0
 000000FC  BE 00000300 R	mov esi, OFFSET ltable
 00000101  8A 45 0C		mov al, b
 00000104  03 F0		add esi, eax
 00000106  8A 1E		mov bl, BYTE PTR [esi]

 00000108  8A F3		mov dh, bl

 0000010A  02 D6		add dl, dh      ; L + L

 0000010C  B8 00000000		mov eax, 0
 00000111  BE 00000200 R	mov esi, OFFSET etable
 00000116  8A C2		mov al, dl
 00000118  03 F0		add esi, eax
 0000011A  8A 06		mov al, BYTE PTR [esi]

				ret
 0000011C  5A		   *	    pop    edx
 0000011D  5B		   *	    pop    ebx
 0000011E  5E		   *	    pop    esi
 0000011F  C9		   *	    leave  
 00000120  C2 0008	   *	    ret    00008h
 00000123			pMultGalois ENDP


				;---------------------------
 00000123			pMixCol PROC USES eax ebx ecx edx esi edi
				;---------------------------
 00000123  50		   *	    push   eax
 00000124  53		   *	    push   ebx
 00000125  51		   *	    push   ecx
 00000126  52		   *	    push   edx
 00000127  56		   *	    push   esi
 00000128  57		   *	    push   edi
 00000129  B8 00000000			mov eax, 0


 0000012E  B9 00000004			mov ecx, 4
 00000133  BE 00000000			mov esi, 0
 00000138  BB 00000000			mov ebx, 0
 0000013D  BF 00000000			mov edi, 0
 00000142			loop2:
 00000142  51				push ecx
 00000143  57				push edi
 00000144  B9 00000004			mov ecx, 4
 00000149  BE 00000000			mov esi, 0
 0000014E				loop1: 
						;mov al, State[edi+0]
						;mul matrix[0]

						invoke pMultGalois, State[edi+0], matrix[0]
 0000014E  A0 00000420 R   *	    mov    al, matrix
 00000153  50		   *	    push   eax
 00000154  8A 87 00000400 R *	    mov    al, State[edi]
 0000015A  50		   *	    push   eax
 0000015B  E8 FFFFFF7E	   *	    call   pMultGalois
 00000160  8A D0				mov dl, al

						;mov al, State[edi+1]
						;mul matrix[1]

						invoke pMultGalois, State[edi+1], matrix[1]
 00000162  A0 00000421 R   *	    mov    al, matrix+001h
 00000167  50		   *	    push   eax
 00000168  8A 87 00000401 R *	    mov    al, State[edi]+001h
 0000016E  50		   *	    push   eax
 0000016F  E8 FFFFFF6A	   *	    call   pMultGalois
 00000174  8A F0				mov dh, al

						;mov al, State[edi+2]
						;mul matrix[2]

						invoke pMultGalois, State[edi+2], matrix[2]
 00000176  A0 00000422 R   *	    mov    al, matrix+002h
 0000017B  50		   *	    push   eax
 0000017C  8A 87 00000402 R *	    mov    al, State[edi]+002h
 00000182  50		   *	    push   eax
 00000183  E8 FFFFFF56	   *	    call   pMultGalois
 00000188  8A D8				mov bl, al

						;mov al, State[edi+3]
						;mul matrix[3]

						invoke pMultGalois, State[edi+3], matrix[3]
 0000018A  A0 00000423 R   *	    mov    al, matrix+003h
 0000018F  50		   *	    push   eax
 00000190  8A 87 00000403 R *	    mov    al, State[edi]+003h
 00000196  50		   *	    push   eax
 00000197  E8 FFFFFF42	   *	    call   pMultGalois
 0000019C  8A F8				mov bh, al

 0000019E  32 D6				xor dl, dh
 000001A0  32 D3				xor dl, bl
 000001A2  32 D7				xor dl, bh

 000001A4  88 94 3E				mov temp[edi+esi], dl
	   00000410 R

						;this will be mShiftMatrix
						invoke pSwap, ADDR matrix[2], ADDR matrix[3]
 000001AB  68 00000423 R   *	    push   OFFSET matrix+000000003h
 000001B0  68 00000422 R   *	    push   OFFSET matrix+000000002h
 000001B5  E8 FFFFFE46	   *	    call   pSwap
						invoke pSwap, ADDR matrix[1], ADDR matrix[2]
 000001BA  68 00000422 R   *	    push   OFFSET matrix+000000002h
 000001BF  68 00000421 R   *	    push   OFFSET matrix+000000001h
 000001C4  E8 FFFFFE37	   *	    call   pSwap
						invoke pSwap, ADDR matrix[0], ADDR matrix[1]
 000001C9  68 00000421 R   *	    push   OFFSET matrix+000000001h
 000001CE  68 00000420 R   *	    push   OFFSET matrix
 000001D3  E8 FFFFFE28	   *	    call   pSwap

 000001D8  46					inc esi

 000001D9  49					dec ecx
 000001DA  0F 85 FFFFFF6E			jne loop1
 000001E0  5F					pop edi
 000001E1  59					pop ecx

 000001E2  83 C7 04				add edi, 4
 000001E5  49					dec ecx
 000001E6  0F 85 FFFFFF56		jne loop2
					

 000001EC  B9 00000010			mov ecx, 16 ; change back to 16
 000001F1  BE 00000000			mov esi, 0
 000001F6				L2:
						invoke pSwap, ADDR State[esi], ADDR temp[esi]
 000001F6  8D 86 00000410 R *	    lea    eax, temp[esi]
 000001FC  50		   *	    push   eax
 000001FD  8D 86 00000400 R *	    lea    eax, State[esi]
 00000203  50		   *	    push   eax
 00000204  E8 FFFFFDF7	   *	    call   pSwap
 00000209  46					inc esi
 0000020A  E2 EA				loop L2

				ret
 0000020C  5F		   *	    pop    edi
 0000020D  5E		   *	    pop    esi
 0000020E  5A		   *	    pop    edx
 0000020F  59		   *	    pop    ecx
 00000210  5B		   *	    pop    ebx
 00000211  58		   *	    pop    eax
 00000212  C3		   *	    ret    00000h
 00000213			pMixCol ENDP



 00000213			main PROC
					;mByteSub State
					;invoke pShiftRow
					
					invoke pMixCol
 00000213  E8 FFFFFF0B	   *	    call   pMixCol

 00000218  E8 00000000 E		call Dumpregs

					exit
 0000021D  6A 00	   *	    push   +000000000h
 0000021F  E8 00000000 E   *	    call   ExitProcess
 00000224			main ENDP




				END main
Microsoft (R) Macro Assembler Version 14.00.23026.0	    12/08/15 17:02:02
AddTwo.asm						     Symbols 2 - 1




Macros:

                N a m e                 Type

mAddRoundKey . . . . . . . . . .	Proc
mByteSub . . . . . . . . . . . .	Proc
mShiftMatrix . . . . . . . . . .	Proc
mSwap  . . . . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00000425 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000224 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000213 _TEXT	Length= 00000011 Public STDCALL
pMixCol  . . . . . . . . . . . .	P Near	 00000123 _TEXT	Length= 000000F0 Public STDCALL
  loop2  . . . . . . . . . . . .	L Near	 00000142 _TEXT	
  loop1  . . . . . . . . . . . .	L Near	 0000014E _TEXT	
  L2 . . . . . . . . . . . . . .	L Near	 000001F6 _TEXT	
pMultGalois  . . . . . . . . . .	P Near	 000000DE _TEXT	Length= 00000045 Public STDCALL
  a  . . . . . . . . . . . . . .	Byte	 bp + 00000008
  b  . . . . . . . . . . . . . .	Byte	 bp + 0000000C
pShiftRow  . . . . . . . . . . .	P Near	 0000001D _TEXT	Length= 000000C1 Public STDCALL
pSwap  . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 0000001D Public STDCALL
  y  . . . . . . . . . . . . . .	DWord	 bp + 00000008
  x  . . . . . . . . . . . . . .	DWord	 bp + 0000000C
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
State  . . . . . . . . . . . . .	Byte	 00000400 _DATA	
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
cyan . . . . . . . . . . . . . .	Number	 00000003h   
etable . . . . . . . . . . . . .	Byte	 00000200 _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
ltable . . . . . . . . . . . . .	Byte	 00000300 _DATA	
magenta  . . . . . . . . . . . .	Number	 00000005h   
matrix . . . . . . . . . . . . .	Byte	 00000420 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
sboxinv  . . . . . . . . . . . .	Byte	 00000100 _DATA	
sbox . . . . . . . . . . . . . .	Byte	 00000000 _DATA	
temp . . . . . . . . . . . . . .	Byte	 00000410 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   
zero . . . . . . . . . . . . . .	Byte	 00000424 _DATA	

	   0 Warnings
	   0 Errors
