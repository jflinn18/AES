Microsoft (R) Macro Assembler Version 14.00.23026.0	    12/16/15 12:48:32
AddTwo.asm						     Page 1 - 1



				; Program Desription:
				; Author:
				; Creation Date:
				; Revisions:
				; Date: 0 0 0 0Modified by: 0 0 Changes:
				;


				;http://www.adamberent.com/documents/AESbyExample.pdf


				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

 = 00000800			FILESIZE = 2048

 00000000			.data
				; S-Box Lookup Table
 00000000 63 7C 77 7B F2	sbox	BYTE	063h, 07Ch, 077h, 07Bh, 0F2h, 06Bh, 06Fh, 0C5h, 030h, 001h, 067h, 02Bh, 0FEh, 0D7h, 0ABh, 076h 
	   6B 6F C5 30 01
	   67 2B FE D7 AB
	   76
 00000010  CA 82 C9 7D FA			BYTE	0CAh, 082h, 0C9h, 07Dh, 0FAh, 059h, 047h, 0F0h, 0ADh, 0D4h, 0A2h, 0AFh, 09Ch, 0A4h, 072h, 0C0h 
	   59 47 F0 AD D4
	   A2 AF 9C A4 72
	   C0
 00000020  B7 FD 93 26 36			BYTE	0B7h, 0FDh, 093h, 026h, 036h, 03Fh, 0F7h, 0CCh, 034h, 0A5h, 0E5h, 0F1h, 071h, 0D8h, 031h, 015h 
	   3F F7 CC 34 A5
	   E5 F1 71 D8 31
	   15
 00000030  04 C7 23 C3 18			BYTE	004h, 0C7h, 023h, 0C3h, 018h, 096h, 005h, 09Ah, 007h, 012h, 080h, 0E2h, 0EBh, 027h, 0B2h, 075h
	   96 05 9A 07 12
	   80 E2 EB 27 B2
	   75
 00000040  09 83 2C 1A 1B			BYTE	009h, 083h, 02Ch, 01Ah, 01Bh, 06Eh, 05Ah, 0A0h, 052h, 03Bh, 0D6h, 0B3h, 029h, 0E3h, 02Fh, 084h
	   6E 5A A0 52 3B
	   D6 B3 29 E3 2F
	   84
 00000050  53 D1 00 ED 20			BYTE	053h, 0D1h, 000h, 0EDh, 020h, 0FCh, 0B1h, 05Bh, 06Ah, 0CBh, 0BEh, 039h, 04Ah, 04Ch, 058h, 0CFh
	   FC B1 5B 6A CB
	   BE 39 4A 4C 58
	   CF
 00000060  D0 EF AA FB 43			BYTE	0D0h, 0EFh, 0AAh, 0FBh, 043h, 04Dh, 033h, 085h, 045h, 0F9h, 002h, 07Fh, 050h, 03Ch, 09Fh, 0A8h
	   4D 33 85 45 F9
	   02 7F 50 3C 9F
	   A8
 00000070  51 A3 40 8F 92			BYTE	051h, 0A3h, 040h, 08Fh, 092h, 09Dh, 038h, 0F5h, 0BCh, 0B6h, 0DAh, 021h, 010h, 0FFh, 0F3h, 0D2h
	   9D 38 F5 BC B6
	   DA 21 10 FF F3
	   D2
 00000080  CD 0C 13 EC 5F			BYTE	0CDh, 00Ch, 013h, 0ECh, 05Fh, 097h, 044h, 017h, 0C4h, 0A7h, 07Eh, 03Dh, 064h, 05Dh, 019h, 073h
	   97 44 17 C4 A7
	   7E 3D 64 5D 19
	   73
 00000090  60 81 4F DC 22			BYTE	060h, 081h, 04Fh, 0DCh, 022h, 02Ah, 090h, 088h, 046h, 0EEh, 0B8h, 014h, 0DEh, 05Eh, 00Bh, 0DBh
	   2A 90 88 46 EE
	   B8 14 DE 5E 0B
	   DB
 000000A0  E0 32 3A 0A 49			BYTE	0E0h, 032h, 03Ah, 00Ah, 049h, 006h, 024h, 05Ch, 0C2h, 0D3h, 0ACh, 062h, 091h, 095h, 0E4h, 079h
	   06 24 5C C2 D3
	   AC 62 91 95 E4
	   79
 000000B0  E7 C8 37 6D 8D			BYTE	0E7h, 0C8h, 037h, 06Dh, 08Dh, 0D5h, 04Eh, 0A9h, 06Ch, 056h, 0F4h, 0EAh, 065h, 07Ah, 0AEh, 008h
	   D5 4E A9 6C 56
	   F4 EA 65 7A AE
	   08
 000000C0  BA 78 25 2E 1C			BYTE	0BAh, 078h, 025h, 02Eh, 01Ch, 0A6h, 0B4h, 0C6h, 0E8h, 0DDh, 074h, 01Fh, 04Bh, 0BDh, 08Bh, 08Ah
	   A6 B4 C6 E8 DD
	   74 1F 4B BD 8B
	   8A
 000000D0  70 3E B5 66 48			BYTE	070h, 03Eh, 0B5h, 066h, 048h, 003h, 0F6h, 00Eh, 061h, 035h, 057h, 0B9h, 086h, 0C1h, 01Dh, 09Eh
	   03 F6 0E 61 35
	   57 B9 86 C1 1D
	   9E
 000000E0  E1 F8 98 11 69			BYTE	0E1h, 0F8h, 098h, 011h, 069h, 0D9h, 08Eh, 094h, 09Bh, 01Eh, 087h, 0E9h, 0CEh, 055h, 028h, 0DFh
	   D9 8E 94 9B 1E
	   87 E9 CE 55 28
	   DF
 000000F0  8C A1 89 0D BF			BYTE	08Ch, 0A1h, 089h, 00Dh, 0BFh, 0E6h, 042h, 068h, 041h, 099h, 02Dh, 00Fh, 0B0h, 054h, 0BBh, 016h
	   E6 42 68 41 99
	   2D 0F B0 54 BB
	   16
				; S-Box Inverse Lookup Table
 00000100 52 09 6A D5 30	sboxinv	BYTE	052h, 009h, 06Ah, 0D5h, 030h, 036h, 0A5h, 038h, 0BFh, 040h, 0A3h, 09Eh, 081h, 0F3h, 0D7h, 0FBh
	   36 A5 38 BF 40
	   A3 9E 81 F3 D7
	   FB
 00000110  7C E3 39 82 9B			BYTE	07Ch, 0E3h, 039h, 082h, 09Bh, 02Fh, 0FFh, 087h, 034h, 08Eh, 043h, 044h, 0C4h, 0DEh, 0E9h, 0CBh
	   2F FF 87 34 8E
	   43 44 C4 DE E9
	   CB
 00000120  54 7B 94 32 A6			BYTE	054h, 07Bh, 094h, 032h, 0A6h, 0C2h, 023h, 03Dh, 0EEh, 04Ch, 095h, 00Bh, 042h, 0FAh, 0C3h, 04Eh
	   C2 23 3D EE 4C
	   95 0B 42 FA C3
	   4E
 00000130  08 2E A1 66 28			BYTE	008h, 02Eh, 0A1h, 066h, 028h, 0D9h, 024h, 0B2h, 076h, 05Bh, 0A2h, 049h, 06Dh, 08Bh, 0D1h, 025h
	   D9 24 B2 76 5B
	   A2 49 6D 8B D1
	   25
 00000140  72 F8 F6 64 86			BYTE	072h, 0F8h, 0F6h, 064h, 086h, 068h, 098h, 016h, 0D4h, 0A4h, 05Ch, 0CCh, 05Dh, 065h, 0B6h, 092h
	   68 98 16 D4 A4
	   5C CC 5D 65 B6
	   92
 00000150  6C 70 48 50 FD			BYTE	06Ch, 070h, 048h, 050h, 0FDh, 0EDh, 0B9h, 0DAh, 05Eh, 015h, 046h, 057h, 0A7h, 08Dh, 09Dh, 084h
	   ED B9 DA 5E 15
	   46 57 A7 8D 9D
	   84
 00000160  90 D8 AB 00 8C			BYTE	090h, 0D8h, 0ABh, 000h, 08Ch, 0BCh, 0D3h, 00Ah, 0F7h, 0E4h, 058h, 005h, 0B8h, 0B3h, 045h, 006h
	   BC D3 0A F7 E4
	   58 05 B8 B3 45
	   06
 00000170  D0 2C 1E 8F CA			BYTE	0D0h, 02Ch, 01Eh, 08Fh, 0CAh, 03Fh, 00Fh, 002h, 0C1h, 0AFh, 0BDh, 003h, 001h, 013h, 08Ah, 06Bh
	   3F 0F 02 C1 AF
	   BD 03 01 13 8A
	   6B
 00000180  3A 91 11 41 4F			BYTE	03Ah, 091h, 011h, 041h, 04Fh, 067h, 0DCh, 0EAh, 097h, 0F2h, 0CFh, 0CEh, 0F0h, 0B4h, 0E6h, 073h
	   67 DC EA 97 F2
	   CF CE F0 B4 E6
	   73
 00000190  96 AC 74 22 E7			BYTE	096h, 0ACh, 074h, 022h, 0E7h, 0ADh, 035h, 085h, 0E2h, 0F9h, 037h, 0E8h, 01Ch, 075h, 0DFh, 06Eh
	   AD 35 85 E2 F9
	   37 E8 1C 75 DF
	   6E
 000001A0  47 F1 1A 71 1D			BYTE	047h, 0F1h, 01Ah, 071h, 01Dh, 029h, 0C5h, 089h, 06Fh, 0B7h, 062h, 00Eh, 0AAh, 018h, 0BEh, 01Bh
	   29 C5 89 6F B7
	   62 0E AA 18 BE
	   1B
 000001B0  FC 56 3E 4B C6			BYTE	0FCh, 056h, 03Eh, 04Bh, 0C6h, 0D2h, 079h, 020h, 09Ah, 0DBh, 0C0h, 0FEh, 078h, 0CDh, 05Ah, 0F4h
	   D2 79 20 9A DB
	   C0 FE 78 CD 5A
	   F4
 000001C0  1F DD A8 33 88			BYTE	01Fh, 0DDh, 0A8h, 033h, 088h, 007h, 0C7h, 031h, 0B1h, 012h, 010h, 059h, 027h, 080h, 0ECh, 05Fh
	   07 C7 31 B1 12
	   10 59 27 80 EC
	   5F
 000001D0  60 51 7F A9 19			BYTE	060h, 051h, 07Fh, 0A9h, 019h, 0B5h, 04Ah, 00Dh, 02Dh, 0E5h, 07Ah, 09Fh, 093h, 0C9h, 09Ch, 0EFh
	   B5 4A 0D 2D E5
	   7A 9F 93 C9 9C
	   EF
 000001E0  A0 E0 3B 4D AE			BYTE	0A0h, 0E0h, 03Bh, 04Dh, 0AEh, 02Ah, 0F5h, 0B0h, 0C8h, 0EBh, 0BBh, 03Ch, 083h, 053h, 099h, 061h
	   2A F5 B0 C8 EB
	   BB 3C 83 53 99
	   61
 000001F0  17 2B 04 7E BA			BYTE	017h, 02Bh, 004h, 07Eh, 0BAh, 077h, 0D6h, 026h, 0E1h, 069h, 014h, 063h, 055h, 021h, 00Ch, 07Dh
	   77 D6 26 E1 69
	   14 63 55 21 0C
	   7D
				;E Lookup Table
 00000200 01 03 05 0F 11	etable	BYTE	001h, 003h, 005h, 00Fh, 011h, 033h, 055h, 0FFh, 01Ah, 02Eh, 072h, 096h, 0A1h, 0F8h, 013h, 035h
	   33 55 FF 1A 2E
	   72 96 A1 F8 13
	   35
 00000210  5F E1 38 48 D8			BYTE	05Fh, 0E1h, 038h, 048h, 0D8h, 073h, 095h, 0A4h, 0F7h, 002h, 006h, 00Ah, 01Eh, 022h, 066h, 0AAh
	   73 95 A4 F7 02
	   06 0A 1E 22 66
	   AA
 00000220  E5 34 5C E4 37			BYTE	0E5h, 034h, 05Ch, 0E4h, 037h, 059h, 0EBh, 026h, 06Ah, 0BEh, 0D9h, 070h, 090h, 0ABh, 0E6h, 031h
	   59 EB 26 6A BE
	   D9 70 90 AB E6
	   31
 00000230  53 F5 04 0C 14			BYTE	053h, 0F5h, 004h, 00Ch, 014h, 03Ch, 044h, 0CCh, 04Fh, 0D1h, 068h, 0B8h, 0D3h, 06Eh, 0B2h, 0CDh
	   3C 44 CC 4F D1
	   68 B8 D3 6E B2
	   CD
 00000240  4C D4 67 A9 E0			BYTE	04Ch, 0D4h, 067h, 0A9h, 0E0h, 03Bh, 04Dh, 0D7h, 062h, 0A6h, 0F1h, 008h, 018h, 028h, 078h, 088h
	   3B 4D D7 62 A6
	   F1 08 18 28 78
	   88
 00000250  83 9E B9 D0 6B			BYTE	083h, 09Eh, 0B9h, 0D0h, 06Bh, 0BDh, 0DCh, 07Fh, 081h, 098h, 0B3h, 0CEh, 049h, 0DBh, 076h, 09Ah
	   BD DC 7F 81 98
	   B3 CE 49 DB 76
	   9A
 00000260  B5 C4 57 F9 10			BYTE	0B5h, 0C4h, 057h, 0F9h, 010h, 030h, 050h, 0F0h, 00Bh, 01Dh, 027h, 069h, 0BBh, 0D6h, 061h, 0A3h
	   30 50 F0 0B 1D
	   27 69 BB D6 61
	   A3
 00000270  FE 19 2B 7D 87			BYTE	0FEh, 019h, 02Bh, 07Dh, 087h, 092h, 0ADh, 0ECh, 02Fh, 071h, 093h, 0AEh, 0E9h, 020h, 060h, 0A0h
	   92 AD EC 2F 71
	   93 AE E9 20 60
	   A0
 00000280  FB 16 3A 4E D2			BYTE	0FBh, 016h, 03Ah, 04Eh, 0D2h, 06Dh, 0B7h, 0C2h, 05Dh, 0E7h, 032h, 056h, 0FAh, 015h, 03Fh, 041h
	   6D B7 C2 5D E7
	   32 56 FA 15 3F
	   41
 00000290  C3 5E E2 3D 47			BYTE	0C3h, 05Eh, 0E2h, 03Dh, 047h, 0C9h, 040h, 0C0h, 05Bh, 0EDh, 02Ch, 074h, 09Ch, 0BFh, 0DAh, 075h
	   C9 40 C0 5B ED
	   2C 74 9C BF DA
	   75
 000002A0  9F BA D5 64 AC			BYTE	09Fh, 0BAh, 0D5h, 064h, 0ACh, 0EFh, 02Ah, 07Eh, 082h, 09Dh, 0BCh, 0DFh, 07Ah, 08Eh, 089h, 080h
	   EF 2A 7E 82 9D
	   BC DF 7A 8E 89
	   80
 000002B0  9B B6 C1 58 E8			BYTE	09Bh, 0B6h, 0C1h, 058h, 0E8h, 023h, 065h, 0AFh, 0EAh, 025h, 06Fh, 0B1h, 0C8h, 043h, 0C5h, 054h
	   23 65 AF EA 25
	   6F B1 C8 43 C5
	   54
 000002C0  FC 1F 21 63 A5			BYTE	0FCh, 01Fh, 021h, 063h, 0A5h, 0F4h, 007h, 009h, 01Bh, 02Dh, 077h, 099h, 0B0h, 0CBh, 046h, 0CAh
	   F4 07 09 1B 2D
	   77 99 B0 CB 46
	   CA
 000002D0  45 CF 4A DE 79			BYTE	045h, 0CFh, 04Ah, 0DEh, 079h, 08Bh, 086h, 091h, 0A8h, 0E3h, 03Eh, 042h, 0C6h, 051h, 0F3h, 00Eh
	   8B 86 91 A8 E3
	   3E 42 C6 51 F3
	   0E
 000002E0  12 36 5A EE 29			BYTE	012h, 036h, 05Ah, 0EEh, 029h, 07Bh, 08Dh, 08Ch, 08Fh, 08Ah, 085h, 094h, 0A7h, 0F2h, 00Dh, 017h
	   7B 8D 8C 8F 8A
	   85 94 A7 F2 0D
	   17
 000002F0  39 4B DD 7C 84			BYTE	039h, 04Bh, 0DDh, 07Ch, 084h, 097h, 0A2h, 0FDh, 01Ch, 024h, 06Ch, 0B4h, 0C7h, 052h, 0F6h, 001h
	   97 A2 FD 1C 24
	   6C B4 C7 52 F6
	   01
				;L Lookup Table
 00000300 00 00 19 01 32	ltable	BYTE	000h, 000h, 019h, 001h, 032h, 002h, 01Ah, 0C6h, 04Bh, 0C7h, 01Bh, 068h, 033h, 0EEh, 0DFh, 003h
	   02 1A C6 4B C7
	   1B 68 33 EE DF
	   03
 00000310  64 04 E0 0E 34			BYTE	064h, 004h, 0E0h, 00Eh, 034h, 08Dh, 081h, 0EFh, 04Ch, 071h, 008h, 0C8h, 0F8h, 069h, 01Ch, 0C1h
	   8D 81 EF 4C 71
	   08 C8 F8 69 1C
	   C1
 00000320  7D C2 1D B5 F9			BYTE	07Dh, 0C2h, 01Dh, 0B5h, 0F9h, 0B9h, 027h, 06Ah, 04Dh, 0E4h, 0A6h, 072h, 09Ah, 0C9h, 009h, 078h
	   B9 27 6A 4D E4
	   A6 72 9A C9 09
	   78
 00000330  65 2F 8A 05 21			BYTE	065h, 02Fh, 08Ah, 005h, 021h, 00Fh, 0E1h, 024h, 012h, 0F0h, 082h, 045h, 035h, 093h, 0DAh, 08Eh
	   0F E1 24 12 F0
	   82 45 35 93 DA
	   8E
 00000340  96 8F DB BD 36			BYTE	096h, 08Fh, 0DBh, 0BDh, 036h, 0D0h, 0CEh, 094h, 013h, 05Ch, 0D2h, 0F1h, 040h, 046h, 083h, 038h
	   D0 CE 94 13 5C
	   D2 F1 40 46 83
	   38
 00000350  66 DD FD 30 BF			BYTE	066h, 0DDh, 0FDh, 030h, 0BFh, 006h, 08Bh, 062h, 0B3h, 025h, 0E2h, 098h, 022h, 088h, 091h, 010h
	   06 8B 62 B3 25
	   E2 98 22 88 91
	   10
 00000360  7E 6E 48 C3 A3			BYTE	07Eh, 06Eh, 048h, 0C3h, 0A3h, 0B6h, 01Eh, 042h, 03Ah, 06Bh, 028h, 054h, 0FAh, 085h, 03Dh, 0BAh
	   B6 1E 42 3A 6B
	   28 54 FA 85 3D
	   BA
 00000370  2B 79 0A 15 9B			BYTE	02Bh, 079h, 00Ah, 015h, 09Bh, 09Fh, 05Eh, 0CAh, 04Eh, 0D4h, 0ACh, 0E5h, 0F3h, 073h, 0A7h, 057h
	   9F 5E CA 4E D4
	   AC E5 F3 73 A7
	   57
 00000380  AF 58 A8 50 F4			BYTE	0AFh, 058h, 0A8h, 050h, 0F4h, 0EAh, 0D6h, 074h, 04Fh, 0AEh, 0E9h, 0D5h, 0E7h, 0E6h, 0ADh, 0E8h
	   EA D6 74 4F AE
	   E9 D5 E7 E6 AD
	   E8
 00000390  2C D7 75 7A EB			BYTE	02Ch, 0D7h, 075h, 07Ah, 0EBh, 016h, 00Bh, 0F5h, 059h, 0CBh, 05Fh, 0B0h, 09Ch, 0A9h, 051h, 0A0h
	   16 0B F5 59 CB
	   5F B0 9C A9 51
	   A0
 000003A0  7F 0C F6 6F 17			BYTE	07Fh, 00Ch, 0F6h, 06Fh, 017h, 0C4h, 049h, 0ECh, 0D8h, 043h, 01Fh, 02Dh, 0A4h, 076h, 07Bh, 0B7h
	   C4 49 EC D8 43
	   1F 2D A4 76 7B
	   B7
 000003B0  CC BB 3E 5A FB			BYTE	0CCh, 0BBh, 03Eh, 05Ah, 0FBh, 060h, 0B1h, 086h, 03Bh, 052h, 0A1h, 06Ch, 0AAh, 055h, 029h, 09Dh
	   60 B1 86 3B 52
	   A1 6C AA 55 29
	   9D
 000003C0  97 B2 87 90 61			BYTE	097h, 0B2h, 087h, 090h, 061h, 0BEh, 0DCh, 0FCh, 0BCh, 095h, 0CFh, 0CDh, 037h, 03Fh, 05Bh, 0D1h
	   BE DC FC BC 95
	   CF CD 37 3F 5B
	   D1
 000003D0  53 39 84 3C 41			BYTE	053h, 039h, 084h, 03Ch, 041h, 0A2h, 06Dh, 047h, 014h, 02Ah, 09Eh, 05Dh, 056h, 0F2h, 0D3h, 0ABh
	   A2 6D 47 14 2A
	   9E 5D 56 F2 D3
	   AB
 000003E0  44 11 92 D9 23			BYTE	044h, 011h, 092h, 0D9h, 023h, 020h, 02Eh, 089h, 0B4h, 07Ch, 0B8h, 026h, 077h, 099h, 0E3h, 0A5h
	   20 2E 89 B4 7C
	   B8 26 77 99 E3
	   A5
 000003F0  67 4A ED DE C5			BYTE	067h, 04Ah, 0EDh, 0DEh, 0C5h, 031h, 0FEh, 018h, 00Dh, 063h, 08Ch, 080h, 0C0h, 0F7h, 070h, 007h
	   31 FE 18 0D 63
	   8C 80 C0 F7 70
	   07

				; Rcon "function" for key expansion
 00000400 01000000		Rcon	DWORD	01000000h, 02000000h, 04000000h, 08000000h, 10000000h, 20000000h, 40000000h, 80000000h, 1B000000h, 36000000h
	   02000000
	   04000000
	   08000000
	   10000000
	   20000000
	   40000000
	   80000000
	   1B000000
	   36000000
 00000428  6C000000				DWORD	6c000000h, 0d8000000h, 0ab000000h, 4d000000h, 9a000000h
	   D8000000
	   AB000000
	   4D000000
	   9A000000

				;State BYTE 0h,1h,2h,3h,4h,5h,6h,7h,8h,9,0ah,0bh,0ch,0dh,0eh,0fh
 0000043C 0F 0E 0D 0C 0B	State BYTE 0fh, 0eh, 0dh, 0ch, 0bh, 0ah, 9h,8h,7h,6h,5h,4h,3h,2h,1h,0h
	   0A 09 08 07 06
	   05 04 03 02 01
	   00
				;State BYTE 4 DUP(0,1,2,3)
				;State BYTE 4 DUP(04h, 66h, 81h, 0e5h)
				;State BYTE 4 DUP(0d4h, 0bfh, 5dh, 30h)
 0000044C  00000010 [		temp BYTE 16 DUP(0)
	    00
	   ]
 0000045C 02 03 01 01		matrix BYTE 2,3,1,1
 00000460 0E 0B 0D 09		matrixinv BYTE 0eh, 0bh, 0dh, 09h
 00000464 01 02 03 04		keytest BYTE 1,2,3,4

				;key BYTE 0h,1h,2h,3h,4h,5h,6h,7h,8h,9,0ah,0bh,0ch,0dh,0eh,0fh
 00000468 34 6C 25 56 FF	key BYTE 34h, 6ch, 25h,56h, 0ffh, 9ah, 89h, 0d2h, 99h, 0f1h, 4bh, 25h, 50h, 80h, 4fh, 27h
	   9A 89 D2 99 F1
	   4B 25 50 80 4F
	   27
 00000478  000000B0 [		expKey BYTE 176 DUP(0)
	    00
	   ]


 00000528  00000800 [		inbuffer BYTE FILESIZE DUP(0)
	    00
	   ]
				;inbuffer BYTE "mississippiState",0
 00000D28  00000800 [		outbuffer BYTE FILESIZE DUP(0)
	    00
	   ]


 00001528  00000100 [		infile BYTE 256 DUP(0)
	    00
	   ]

 00001628 45 6E 74 65 72	inmsg BYTE "Enter the file name containing the text: ",0
	   20 74 68 65 20
	   66 69 6C 65 20
	   6E 61 6D 65 20
	   63 6F 6E 74 61
	   69 6E 69 6E 67
	   20 74 68 65 20
	   74 65 78 74 3A
	   20 00
 00001652 45 6E 74 65 72	keymsg BYTE "Enter the key: ",0
	   20 74 68 65 20
	   6B 65 79 3A 20
	   00
 00001662 45 6E 74 65 72	filesizemsg BYTE "Enter size of file in bytes: ",0
	   20 73 69 7A 65
	   20 6F 66 20 66
	   69 6C 65 20 69
	   6E 20 62 79 74
	   65 73 3A 20 00

 00001680 00000000		sizeoffile DWORD ?

 00001684 31 2E 20 45 6E	menu BYTE "1. Encrypt", 0ah, 0dh, "2. Decrypt", 0ah, 0dh, "3. Exit", 0ah, 0dh, ">> ",0
	   63 72 79 70 74
	   0A 0D 32 2E 20
	   44 65 63 72 79
	   70 74 0A 0D 33
	   2E 20 45 78 69
	   74 0A 0D 3E 3E
	   20 00


 00000000			.code


				;--------------
 00000000			pSwap PROC USES eax ebx ecx edx y:PTR BYTE, x:PTR BYTE
				;--------------
 00000000  55		   *	    push   ebp
 00000001  8B EC	   *	    mov    ebp, esp
 00000003  50		   *	    push   eax
 00000004  53		   *	    push   ebx
 00000005  51		   *	    push   ecx
 00000006  52		   *	    push   edx
 00000007  8B 55 08			mov edx, y
 0000000A  8A 02			mov al, [edx]
 0000000C  8B 4D 0C			mov ecx, x
 0000000F  8A 19			mov bl, [ecx]
 00000011  88 1A			mov [edx], bl
 00000013  88 01			mov [ecx], al
					ret
 00000015  5A		   *	    pop    edx
 00000016  59		   *	    pop    ecx
 00000017  5B		   *	    pop    ebx
 00000018  58		   *	    pop    eax
 00000019  C9		   *	    leave  
 0000001A  C2 0008	   *	    ret    00008h
 0000001D			pSwap ENDP


				;---------------------------
 0000001D			pSubWord PROC
				; Receives = eax, the 4 bytes to lookup
				; Returns = eax, the 4 bytes that came from the lookup
				;---------------------------
 0000001D  56				push esi
 0000001E  51				push ecx
 0000001F  B9 00000004			mov ecx, 4
 00000024			l2:
 00000024  BA 00000000			mov edx, 0
 00000029  8A D0			mov dl, al
 0000002B  BE 00000000 R		mov esi, OFFSET sbox
 00000030  03 F2			add esi, edx
 00000032  8A 1E			mov bl, BYTE PTR [esi]
 00000034  8A C3			mov al, bl


 00000036  C1 C0 08			rol eax, 8
 00000039  E2 E9			loop l2

 0000003B  59				pop ecx
 0000003C  5E				pop esi
 0000003D  C3				ret
 0000003E			pSubWord ENDP

				;----------------------------
 0000003E			pShiftRow PROC
				; Requires = Nothing
				;----------------------------
				invoke pSwap, ADDR State[1], ADDR State[5]
 0000003E  68 00000441 R   *	    push   OFFSET State+000000005h
 00000043  68 0000043D R   *	    push   OFFSET State+000000001h
 00000048  E8 FFFFFFB3	   *	    call   pSwap
				invoke pSwap, ADDR State[5], ADDR State[9]
 0000004D  68 00000445 R   *	    push   OFFSET State+000000009h
 00000052  68 00000441 R   *	    push   OFFSET State+000000005h
 00000057  E8 FFFFFFA4	   *	    call   pSwap
				invoke pSwap, ADDR State[9], ADDR State[13]
 0000005C  68 00000449 R   *	    push   OFFSET State+00000000Dh
 00000061  68 00000445 R   *	    push   OFFSET State+000000009h
 00000066  E8 FFFFFF95	   *	    call   pSwap

				invoke pSwap, ADDR State[2], ADDR State[10]
 0000006B  68 00000446 R   *	    push   OFFSET State+00000000Ah
 00000070  68 0000043E R   *	    push   OFFSET State+000000002h
 00000075  E8 FFFFFF86	   *	    call   pSwap
				invoke pSwap, ADDR State[6], ADDR State[14]
 0000007A  68 0000044A R   *	    push   OFFSET State+00000000Eh
 0000007F  68 00000442 R   *	    push   OFFSET State+000000006h
 00000084  E8 FFFFFF77	   *	    call   pSwap

				invoke pSwap, ADDR State[15], ADDR State[11]
 00000089  68 00000447 R   *	    push   OFFSET State+00000000Bh
 0000008E  68 0000044B R   *	    push   OFFSET State+00000000Fh
 00000093  E8 FFFFFF68	   *	    call   pSwap
				invoke pSwap, ADDR State[11], ADDR State[7]
 00000098  68 00000443 R   *	    push   OFFSET State+000000007h
 0000009D  68 00000447 R   *	    push   OFFSET State+00000000Bh
 000000A2  E8 FFFFFF59	   *	    call   pSwap
				invoke pSwap, ADDR State[7], ADDR State[3]
 000000A7  68 0000043F R   *	    push   OFFSET State+000000003h
 000000AC  68 00000443 R   *	    push   OFFSET State+000000007h
 000000B1  E8 FFFFFF4A	   *	    call   pSwap

 000000B6  C3			 ret
 000000B7			pShiftRow ENDP

				;------------------------------
 000000B7			pMultGalois PROC USES esi ebx edx a:BYTE, b:BYTE
				; Returns = in al
				;------------------------------
 000000B7  55		   *	    push   ebp
 000000B8  8B EC	   *	    mov    ebp, esp
 000000BA  56		   *	    push   esi
 000000BB  53		   *	    push   ebx
 000000BC  52		   *	    push   edx
				.IF (a == 0)
 000000BD  80 7D 08 00	   *	    cmp    a, 000h
 000000C1  75 04	   *	    jne    @C0001
 000000C3  B0 00		mov al, 0
 000000C5  EB 38		jmp quit
				.ENDIF
 000000C7		   *@C0001:
 000000C7  B8 00000000		mov eax, 0
 000000CC  BE 00000300 R	mov esi, OFFSET ltable
 000000D1  8A 45 08		mov al, a
 000000D4  03 F0		add esi, eax
 000000D6  8A 1E		mov bl, BYTE PTR [esi]

 000000D8  8A D3		mov dl, bl

 000000DA  B8 00000000		mov eax,0
 000000DF  BE 00000300 R	mov esi, OFFSET ltable
 000000E4  8A 45 0C		mov al, b
 000000E7  03 F0		add esi, eax
 000000E9  8A 1E		mov bl, BYTE PTR [esi]

 000000EB  8A F3		mov dh, bl

 000000ED  12 D6		adc dl, dh      ; L + L

 000000EF  B8 00000000		mov eax, 0
 000000F4  BE 00000200 R	mov esi, OFFSET etable
 000000F9  8A C2		mov al, dl
				;add esi, eax
 000000FB  13 F0		adc esi, eax
 000000FD  8A 06		mov al, BYTE PTR [esi]

 000000FF			quit:
				ret
 000000FF  5A		   *	    pop    edx
 00000100  5B		   *	    pop    ebx
 00000101  5E		   *	    pop    esi
 00000102  C9		   *	    leave  
 00000103  C2 0008	   *	    ret    00008h
 00000106			pMultGalois ENDP


				;---------------------------
 00000106			pMixCol PROC USES eax ebx ecx edx esi edi
				;---------------------------
 00000106  50		   *	    push   eax
 00000107  53		   *	    push   ebx
 00000108  51		   *	    push   ecx
 00000109  52		   *	    push   edx
 0000010A  56		   *	    push   esi
 0000010B  57		   *	    push   edi
 0000010C  B8 00000000			mov eax, 0


 00000111  B9 00000004			mov ecx, 4
 00000116  BE 00000000			mov esi, 0
 0000011B  BB 00000000			mov ebx, 0
 00000120  BF 00000000			mov edi, 0
 00000125			loop2:
 00000125  51				push ecx
 00000126  57				push edi
 00000127  B9 00000004			mov ecx, 4
 0000012C  BE 00000000			mov esi, 0
 00000131				loop1: 
						invoke pMultGalois, State[edi+0], matrix[0]
 00000131  A0 0000045C R   *	    mov    al, matrix
 00000136  50		   *	    push   eax
 00000137  8A 87 0000043C R *	    mov    al, State[edi]
 0000013D  50		   *	    push   eax
 0000013E  E8 FFFFFF74	   *	    call   pMultGalois
 00000143  8A D0				mov dl, al

						invoke pMultGalois, State[edi+1], matrix[1]
 00000145  A0 0000045D R   *	    mov    al, matrix+001h
 0000014A  50		   *	    push   eax
 0000014B  8A 87 0000043D R *	    mov    al, State[edi]+001h
 00000151  50		   *	    push   eax
 00000152  E8 FFFFFF60	   *	    call   pMultGalois
 00000157  8A F0				mov dh, al

						invoke pMultGalois, State[edi+2], matrix[2]
 00000159  A0 0000045E R   *	    mov    al, matrix+002h
 0000015E  50		   *	    push   eax
 0000015F  8A 87 0000043E R *	    mov    al, State[edi]+002h
 00000165  50		   *	    push   eax
 00000166  E8 FFFFFF4C	   *	    call   pMultGalois
 0000016B  8A D8				mov bl, al

						invoke pMultGalois, State[edi+3], matrix[3]
 0000016D  A0 0000045F R   *	    mov    al, matrix+003h
 00000172  50		   *	    push   eax
 00000173  8A 87 0000043F R *	    mov    al, State[edi]+003h
 00000179  50		   *	    push   eax
 0000017A  E8 FFFFFF38	   *	    call   pMultGalois
 0000017F  8A F8				mov bh, al

 00000181  32 D6				xor dl, dh
 00000183  32 D3				xor dl, bl
 00000185  32 D7				xor dl, bh

 00000187  88 94 3E				mov temp[edi+esi], dl
	   0000044C R

						;this will be mShiftMatrix
						invoke pSwap, ADDR matrix[2], ADDR matrix[3]
 0000018E  68 0000045F R   *	    push   OFFSET matrix+000000003h
 00000193  68 0000045E R   *	    push   OFFSET matrix+000000002h
 00000198  E8 FFFFFE63	   *	    call   pSwap
						invoke pSwap, ADDR matrix[1], ADDR matrix[2]
 0000019D  68 0000045E R   *	    push   OFFSET matrix+000000002h
 000001A2  68 0000045D R   *	    push   OFFSET matrix+000000001h
 000001A7  E8 FFFFFE54	   *	    call   pSwap
						invoke pSwap, ADDR matrix[0], ADDR matrix[1]
 000001AC  68 0000045D R   *	    push   OFFSET matrix+000000001h
 000001B1  68 0000045C R   *	    push   OFFSET matrix
 000001B6  E8 FFFFFE45	   *	    call   pSwap



						;invoke pSwap, ADDR State[1], ADDR State[2]

 000001BB  46					inc esi

 000001BC  49					dec ecx
 000001BD  0F 85 FFFFFF6E			jne loop1
 000001C3  5F					pop edi
 000001C4  59					pop ecx

 000001C5  83 C7 04				add edi, 4
 000001C8  49					dec ecx
 000001C9  0F 85 FFFFFF56		jne loop2
					

 000001CF  B9 00000010			mov ecx, 16 ; change back to 16
 000001D4  BE 00000000			mov esi, 0
 000001D9				L2:
						invoke pSwap, ADDR State[esi], ADDR temp[esi]
 000001D9  8D 86 0000044C R *	    lea    eax, temp[esi]
 000001DF  50		   *	    push   eax
 000001E0  8D 86 0000043C R *	    lea    eax, State[esi]
 000001E6  50		   *	    push   eax
 000001E7  E8 FFFFFE14	   *	    call   pSwap
 000001EC  46					inc esi
 000001ED  E2 EA				loop L2

				ret
 000001EF  5F		   *	    pop    edi
 000001F0  5E		   *	    pop    esi
 000001F1  5A		   *	    pop    edx
 000001F2  59		   *	    pop    ecx
 000001F3  5B		   *	    pop    ebx
 000001F4  58		   *	    pop    eax
 000001F5  C3		   *	    ret    00000h
 000001F6			pMixCol ENDP


				;-----------------------------
 000001F6			pEK PROC a:BYTE
				; a == 1 || a == 4
				; Receives = esi, the index
				; Returns = eax, a DWORD containing the last 4 bytes of the expanded key.
				;-----------------------------
 000001F6  55		   *	    push   ebp
 000001F7  8B EC	   *	    mov    ebp, esp
 000001F9  8B C6			mov eax, esi
 000001FB  0F B6 5D 08			movzx ebx, a
 000001FF  2B C3			sub eax, ebx
 00000201  BA 00000004			mov edx, 4
 00000206  F7 E2			mul edx
 00000208  8B D0			mov edx, eax

 0000020A  8B 82 00000478 R		mov eax, DWORD PTR expKey[edx] ; This works, but it is in little endian

 00000210  66| 8B D8			mov bx, ax
 00000213  C1 E8 10			shr eax, 16

 00000216  8A D3			mov dl, bl
 00000218  8A DC			mov bl, ah
 0000021A  8A E2			mov ah, dl

 0000021C  8A D0			mov dl, al
 0000021E  8A C7			mov al, bh
 00000220  8A FA			mov bh, dl

 00000222  C1 E0 10			shl eax, 16
 00000225  03 C3			add eax, ebx

					ret
 00000227  C9		   *	    leave  
 00000228  C2 0004	   *	    ret    00004h
 0000022B			pEK ENDP


				;--------------------------
 0000022B			pAddExpKey PROC
				; This takes whatever 
				; Receives = eax
				;--------------------------
 0000022B  51				push ecx
 0000022C  B9 00000004			mov ecx, 4
 00000231  C1 C0 08			rol eax, 8      ; gets the "first value"
 00000234			L16:
 00000234  88 87 00000478 R		mov expKey[edi], al
 0000023A  C1 C0 08			rol eax, 8

 0000023D  47				inc edi
 0000023E  E2 F4			loop L16

 00000240  59				pop ecx
 00000241  C3				ret
 00000242			pAddExpKey ENDP


				;---------------------------------------
 00000242			pExpandKey PROC
				;---------------------------------------
 00000242  B9 00000010			mov ecx, 16
 00000247  BF 00000000			mov edi, 0

					;This is the K(0), K(4), K(8), K(12)
 0000024C			l5:
 0000024C  8A 87 00000468 R		mov al, key[edi]
 00000252  88 87 00000478 R		mov expkey[edi], al
 00000258  47				inc edi

 00000259  E2 F1			loop l5

					
 0000025B  BE 00000004			mov esi, 4	
 00000260  B9 0000000A			mov ecx, 10
								

 00000265			l3:
					; Round # is stored in esi
					invoke pEK, 1					  ; typo????
 00000265  6A 01	   *	    push   +000000001h
 00000267  E8 FFFFFF8A	   *	    call   pEK
 0000026C  C1 C0 08			rol eax, 8                        ;RotWord  --instead of pRotateKey
					invoke pSubWord
 0000026F  E8 FFFFFDA9	   *	    call   pSubWord

 00000274  8B D6			mov edx, esi
 00000276  C1 EA 02			shr edx, 2           ; divide by 4
 00000279  4A				dec edx

 0000027A  BB 00000000			mov ebx, 0
 0000027F  6B D2 04			imul edx, 4
 00000282  8B 9A 00000400 R		mov ebx, Rcon[edx]

 00000288  33 C3			xor eax, ebx
 0000028A  50				push eax

					invoke pEK, 4
 0000028B  6A 04	   *	    push   +000000004h
 0000028D  E8 FFFFFF64	   *	    call   pEK
 00000292  8B D8			mov ebx, eax
 00000294  58				pop eax

 00000295  33 C3			xor eax, ebx

 00000297  46				inc esi
					invoke pAddExpKey
 00000298  E8 FFFFFF8E	   *	    call   pAddExpKey

 0000029D  51				push ecx
 0000029E  B9 00000003			mov ecx, 3

 000002A3				l32:
						invoke pEK, 1
 000002A3  6A 01	   *	    push   +000000001h
 000002A5  E8 FFFFFF4C	   *	    call   pEK
 000002AA  50					push eax
						invoke pEK, 4
 000002AB  6A 04	   *	    push   +000000004h
 000002AD  E8 FFFFFF44	   *	    call   pEK
 000002B2  8B D8				mov ebx, eax
 000002B4  58					pop eax
 000002B5  33 C3				xor eax, ebx
						invoke pAddExpKey
 000002B7  E8 FFFFFF6F	   *	    call   pAddExpKey

 000002BC  46					inc esi
 000002BD  E2 E4				loop l32
					
 000002BF  59				pop ecx
					

 000002C0  49				dec ecx
 000002C1  75 A2			jne l3

 000002C3  C3				ret
 000002C4			pExpandKey ENDP


				;---------------------------
 000002C4			pAddRoundKey PROC
				; Requires edi, the index of the exp
				;---------------------------
 000002C4  60				pushad
 000002C5  B9 00000010			mov ecx, 16
 000002CA  BE 00000000			mov esi, 0
 000002CF			L1:
 000002CF  8A 87 00000478 R		mov al, expKey[edi]
 000002D5  30 86 0000043C R		xor State[esi], al 
					
 000002DB  47				inc edi
 000002DC  46				inc esi
 000002DD  E2 F0			loop L1

 000002DF  61				popad

 000002E0  C3				ret
 000002E1			pAddRoundKey ENDP


				;---------------------------
 000002E1			pByteSub PROC
				;---------------------------
 000002E1  60				pushad
 000002E2  B9 00000010			mov ecx, 16

 000002E7			L2:
 000002E7  B8 00000000			mov eax, 0

 000002EC  8A 81 0000043B R		mov al, State[ecx-1]; lower nibble
 000002F2  BE 00000000 R		mov esi, OFFSET sbox
 000002F7  03 F0			add esi, eax
 000002F9  8A 1E			mov bl, BYTE PTR [esi]
 000002FB  88 99 0000043B R		mov State[ecx-1], bl

 00000301  E2 E4			loop L2

 00000303  61				popad

 00000304  C3				ret
 00000305			pByteSub ENDP



				;---------------------------------------
 00000305			pByteSubInv PROC
				;---------------------------------------
 00000305  60				pushad
 00000306  B9 00000010			mov ecx, 16

 0000030B			L2:
 0000030B  B8 00000000			mov eax, 0

 00000310  8A 81 0000043B R		mov al, State[ecx-1]; lower nibble
 00000316  BE 00000100 R		mov esi, OFFSET sboxinv
 0000031B  03 F0			add esi, eax
 0000031D  8A 1E			mov bl, BYTE PTR [esi]
 0000031F  88 99 0000043B R		mov State[ecx-1], bl

 00000325  E2 E4			loop L2

 00000327  61				popad


 00000328  C3				ret
 00000329			pByteSubInv ENDP


				;----------------------------
 00000329			pShiftRowInv PROC
				; Requires = Nothing
				;----------------------------
				invoke pSwap, ADDR State[9], ADDR State[13]
 00000329  68 00000449 R   *	    push   OFFSET State+00000000Dh
 0000032E  68 00000445 R   *	    push   OFFSET State+000000009h
 00000333  E8 FFFFFCC8	   *	    call   pSwap
				invoke pSwap, ADDR State[5], ADDR State[9]
 00000338  68 00000445 R   *	    push   OFFSET State+000000009h
 0000033D  68 00000441 R   *	    push   OFFSET State+000000005h
 00000342  E8 FFFFFCB9	   *	    call   pSwap
				invoke pSwap, ADDR State[1], ADDR State[5]
 00000347  68 00000441 R   *	    push   OFFSET State+000000005h
 0000034C  68 0000043D R   *	    push   OFFSET State+000000001h
 00000351  E8 FFFFFCAA	   *	    call   pSwap

				invoke pSwap, ADDR State[2], ADDR State[10]
 00000356  68 00000446 R   *	    push   OFFSET State+00000000Ah
 0000035B  68 0000043E R   *	    push   OFFSET State+000000002h
 00000360  E8 FFFFFC9B	   *	    call   pSwap
				invoke pSwap, ADDR State[6], ADDR State[14]
 00000365  68 0000044A R   *	    push   OFFSET State+00000000Eh
 0000036A  68 00000442 R   *	    push   OFFSET State+000000006h
 0000036F  E8 FFFFFC8C	   *	    call   pSwap

				invoke pSwap, ADDR State[7], ADDR State[3]
 00000374  68 0000043F R   *	    push   OFFSET State+000000003h
 00000379  68 00000443 R   *	    push   OFFSET State+000000007h
 0000037E  E8 FFFFFC7D	   *	    call   pSwap
				invoke pSwap, ADDR State[11], ADDR State[7]
 00000383  68 00000443 R   *	    push   OFFSET State+000000007h
 00000388  68 00000447 R   *	    push   OFFSET State+00000000Bh
 0000038D  E8 FFFFFC6E	   *	    call   pSwap
				invoke pSwap, ADDR State[11], ADDR State[15]
 00000392  68 0000044B R   *	    push   OFFSET State+00000000Fh
 00000397  68 00000447 R   *	    push   OFFSET State+00000000Bh
 0000039C  E8 FFFFFC5F	   *	    call   pSwap

 000003A1  C3			 ret
 000003A2			pShiftRowInv ENDP



				;---------------------------
 000003A2			pMixColInv PROC USES eax ebx ecx edx esi edi
				;---------------------------
 000003A2  50		   *	    push   eax
 000003A3  53		   *	    push   ebx
 000003A4  51		   *	    push   ecx
 000003A5  52		   *	    push   edx
 000003A6  56		   *	    push   esi
 000003A7  57		   *	    push   edi
 000003A8  B8 00000000			mov eax, 0


 000003AD  B9 00000004			mov ecx, 4
 000003B2  BE 00000000			mov esi, 0
 000003B7  BB 00000000			mov ebx, 0
 000003BC  BF 00000000			mov edi, 0
 000003C1			loop2:
 000003C1  51				push ecx
 000003C2  57				push edi
 000003C3  B9 00000004			mov ecx, 4
 000003C8  BE 00000000			mov esi, 0

 000003CD				loop1: 
						invoke pMultGalois, State[edi+0], matrixinv[0]
 000003CD  A0 00000460 R   *	    mov    al, matrixinv
 000003D2  50		   *	    push   eax
 000003D3  8A 87 0000043C R *	    mov    al, State[edi]
 000003D9  50		   *	    push   eax
 000003DA  E8 FFFFFCD8	   *	    call   pMultGalois
 000003DF  8A D0				mov dl, al

						invoke pMultGalois, State[edi+1], matrixinv[1]
 000003E1  A0 00000461 R   *	    mov    al, matrixinv+001h
 000003E6  50		   *	    push   eax
 000003E7  8A 87 0000043D R *	    mov    al, State[edi]+001h
 000003ED  50		   *	    push   eax
 000003EE  E8 FFFFFCC4	   *	    call   pMultGalois
 000003F3  8A F0				mov dh, al

						invoke pMultGalois, State[edi+2], matrixinv[2]
 000003F5  A0 00000462 R   *	    mov    al, matrixinv+002h
 000003FA  50		   *	    push   eax
 000003FB  8A 87 0000043E R *	    mov    al, State[edi]+002h
 00000401  50		   *	    push   eax
 00000402  E8 FFFFFCB0	   *	    call   pMultGalois
 00000407  8A D8				mov bl, al

						invoke pMultGalois, State[edi+3], matrixinv[3]
 00000409  A0 00000463 R   *	    mov    al, matrixinv+003h
 0000040E  50		   *	    push   eax
 0000040F  8A 87 0000043F R *	    mov    al, State[edi]+003h
 00000415  50		   *	    push   eax
 00000416  E8 FFFFFC9C	   *	    call   pMultGalois
 0000041B  8A F8				mov bh, al

 0000041D  32 D6				xor dl, dh
 0000041F  32 D3				xor dl, bl
 00000421  32 D7				xor dl, bh

 00000423  88 94 3E				mov temp[edi+esi], dl
	   0000044C R

						;this will be mShiftMatrix
						invoke pSwap, ADDR matrixinv[2], ADDR matrixinv[3]
 0000042A  68 00000463 R   *	    push   OFFSET matrixinv+000000003h
 0000042F  68 00000462 R   *	    push   OFFSET matrixinv+000000002h
 00000434  E8 FFFFFBC7	   *	    call   pSwap
						invoke pSwap, ADDR matrixinv[1], ADDR matrixinv[2]
 00000439  68 00000462 R   *	    push   OFFSET matrixinv+000000002h
 0000043E  68 00000461 R   *	    push   OFFSET matrixinv+000000001h
 00000443  E8 FFFFFBB8	   *	    call   pSwap
						invoke pSwap, ADDR matrixinv[0], ADDR matrixinv[1]
 00000448  68 00000461 R   *	    push   OFFSET matrixinv+000000001h
 0000044D  68 00000460 R   *	    push   OFFSET matrixinv
 00000452  E8 FFFFFBA9	   *	    call   pSwap



						;invoke pSwap, ADDR State[1], ADDR State[2]

 00000457  46					inc esi

 00000458  49					dec ecx
 00000459  0F 85 FFFFFF6E			jne loop1
 0000045F  5F					pop edi
 00000460  59					pop ecx

 00000461  83 C7 04				add edi, 4
 00000464  49					dec ecx
 00000465  0F 85 FFFFFF56		jne loop2
					

 0000046B  B9 00000010			mov ecx, 16 ; change back to 16
 00000470  BE 00000000			mov esi, 0
 00000475				L2:
						invoke pSwap, ADDR State[esi], ADDR temp[esi]
 00000475  8D 86 0000044C R *	    lea    eax, temp[esi]
 0000047B  50		   *	    push   eax
 0000047C  8D 86 0000043C R *	    lea    eax, State[esi]
 00000482  50		   *	    push   eax
 00000483  E8 FFFFFB78	   *	    call   pSwap
 00000488  46					inc esi
 00000489  E2 EA				loop L2

				ret
 0000048B  5F		   *	    pop    edi
 0000048C  5E		   *	    pop    esi
 0000048D  5A		   *	    pop    edx
 0000048E  59		   *	    pop    ecx
 0000048F  5B		   *	    pop    ebx
 00000490  58		   *	    pop    eax
 00000491  C3		   *	    ret    00000h
 00000492			pMixColInv ENDP



				;----------------------------
 00000492			pEncryptBlock PROC USES ecx esi blockAdd:DWORD
				; blockAdd is the memory address of the starting index of the 
				;    the block that is currently being encrypted
				;----------------------------
					 
					; loop and move the blockAdd value into State
 00000492  55		   *	    push   ebp
 00000493  8B EC	   *	    mov    ebp, esp
 00000495  51		   *	    push   ecx
 00000496  56		   *	    push   esi
 00000497  B9 00000010			mov ecx, 16
 0000049C  BE 00000000			mov esi, 0
 000004A1				l5690:
 000004A1  8B FE				mov edi, esi
 000004A3  03 7D 08				add edi, blockAdd
 000004A6  8A 07				mov al, [edi]
 000004A8  88 86 0000043C R			mov State[esi], al
					
 000004AE  46					inc esi
 000004AF  E2 F0				loop l5690

 000004B1  BF 00000000			mov edi, 0
					invoke pAddRoundKey
 000004B6  E8 FFFFFE09	   *	    call   pAddRoundKey

 000004BB  B9 00000009			mov ecx, 9
 000004C0  BE 00000001			mov esi, 1
 000004C5				l8902:
						invoke pByteSub
 000004C5  E8 FFFFFE17	   *	    call   pByteSub
						invoke pShiftRow
 000004CA  E8 FFFFFB6F	   *	    call   pShiftRow
						invoke pMixCol
 000004CF  E8 FFFFFC32	   *	    call   pMixCol

 000004D4  8B FE				mov edi, esi
 000004D6  6B FF 10				imul edi, 16
						invoke pAddRoundKey
 000004D9  E8 FFFFFDE6	   *	    call   pAddRoundKey

 000004DE  46					inc esi
 000004DF  E2 E4				loop l8902


					invoke pByteSub
 000004E1  E8 FFFFFDFB	   *	    call   pByteSub
					invoke pShiftRow
 000004E6  E8 FFFFFB53	   *	    call   pShiftRow
 000004EB  BF 000000A0			mov edi, 160
					invoke pAddRoundKey
 000004F0  E8 FFFFFDCF	   *	    call   pAddRoundKey

					ret
 000004F5  5E		   *	    pop    esi
 000004F6  59		   *	    pop    ecx
 000004F7  C9		   *	    leave  
 000004F8  C2 0004	   *	    ret    00004h
 000004FB			pEncryptBlock ENDP



				;---------------------------------------
 000004FB			pDecryptBlock PROC blockAdd:DWORD
				; blockAdd is the memory address of the starting index of the 
				;    the block that is currently being encrypted
				;---------------------------------------
 000004FB  55		   *	    push   ebp
 000004FC  8B EC	   *	    mov    ebp, esp
 000004FE  B9 00000010			mov ecx, 16
 00000503  BE 00000000			mov esi, 0
 00000508				l7437:
 00000508  8B FE				mov edi, esi
 0000050A  03 7D 08				add edi, blockAdd
 0000050D  8A 07				mov al, [edi]
 0000050F  88 86 0000043C R			mov State[esi], al
					
 00000515  46					inc esi
 00000516  E2 F0				loop l7437

 00000518  BF 000000A0			mov edi, 160
					invoke pAddRoundKey
 0000051D  E8 FFFFFDA2	   *	    call   pAddRoundKey


 00000522  B9 00000009			mov ecx, 9
 00000527				l2163:
						invoke pShiftRowInv
 00000527  E8 FFFFFDFD	   *	    call   pShiftRowInv
						invoke pByteSubInv
 0000052C  E8 FFFFFDD4	   *	    call   pByteSubInv
						
 00000531  8B F9				mov edi, ecx
 00000533  6B FF 10				imul edi, 16
						invoke pAddRoundKey
 00000536  E8 FFFFFD89	   *	    call   pAddRoundKey

						invoke pMixColInv
 0000053B  E8 FFFFFE62	   *	    call   pMixColInv

 00000540  E2 E5				loop l2163

					invoke pShiftRowInv
 00000542  E8 FFFFFDE2	   *	    call   pShiftRowInv
					invoke pByteSubInv
 00000547  E8 FFFFFDB9	   *	    call   pByteSubInv
 0000054C  BF 00000000			mov edi, 0
					invoke pAddRoundKey
 00000551  E8 FFFFFD6E	   *	    call   pAddRoundKey

					ret
 00000556  C9		   *	    leave  
 00000557  C2 0004	   *	    ret    00004h
 0000055A			pDecryptBlock ENDP

				;------------------------------------------------
 0000055A			pFileI PROC
				;------------------------------------------------
 0000055A  BA 00001528 R		mov edx, OFFSET infile
 0000055F  E8 00000000 E		call OpenInputFile
 00000564  8B F8			mov edi, eax                ; filehandle 
 00000566  BA 00000528 R		mov edx, OFFSET inbuffer
 0000056B  8B 0D 00001680 R		mov ecx, sizeoffile
 00000571  E8 00000000 E		call ReadFromFile
 00000576  8B C7			mov eax, edi
 00000578  E8 00000000 E		call CloseFile

					; Debugging purposes???

					;mov edx, OFFSET inbuffer
					;call WriteString
					;call crlf

 0000057D  C3				ret
 0000057E			pFileI ENDP

				;----------------------------------------------------
 0000057E			pFileO PROC
				;----------------------------------------------------
 0000057E  BA 00001528 R		mov edx, OFFSET infile
 00000583  E8 00000000 E		call CreateOutputFile

					; filehandle is in eax
 00000588  8B F8			mov edi, eax

 0000058A  BA 00000D28 R		mov edx, OFFSET outbuffer
 0000058F  8B 0D 00001680 R		mov ecx, sizeoffile
 00000595  E8 00000000 E		call WriteToFile

 0000059A  8B C7			mov eax, edi
 0000059C  E8 00000000 E		call CloseFile


 000005A1  C3				ret
 000005A2			pFileO ENDP


				;----------------------------------------------------
 000005A2			pEncrypt PROC
				;----------------------------------------------------
					invoke pExpandKey
 000005A2  E8 FFFFFC9B	   *	    call   pExpandKey
					invoke pFileI
 000005A7  E8 FFFFFFAE	   *	    call   pFileI

 000005AC  8B 0D 00001680 R		mov ecx, sizeoffile
 000005B2  C1 E9 04			shr ecx, 4         ; divide by 16
 000005B5  8B 15 00001680 R		mov edx, sizeoffile
 000005BB  83 E2 0F			and edx, 00000000000000000000000000001111b
					.IF (edx != 0)
 000005BE  0B D2	   *	    or	edx, edx
 000005C0  74 01	   *	    je	@C0003
 000005C2  41					inc ecx
					.ENDIF
 000005C3		   *@C0003:

 000005C3  8B D1			mov edx, ecx
 000005C5  6B D2 10			imul edx, 16
 000005C8  89 15 00001680 R		mov sizeoffile, edx

 000005CE  BE 00000000			mov esi, 0
 000005D3				l8257: 
 000005D3  8B C6				mov eax, esi
 000005D5  6B C0 10				imul eax, 16
 000005D8  50					push eax
						invoke pEncryptBlock, ADDR inbuffer[eax]
 000005D9  8D 80 00000528 R *	    lea    eax, inbuffer[eax]
 000005DF  50		   *	    push   eax
 000005E0  E8 FFFFFEAD	   *	    call   pEncryptBlock
 000005E5  58					pop eax

 000005E6  51					push ecx
 000005E7  56					push esi

 000005E8  B9 00000010				mov ecx, 16
 000005ED  BE 00000000				mov esi, 0
 000005F2					l90:
 000005F2  50						push eax
							invoke pSwap, ADDR State[esi], ADDR outbuffer[eax]
 000005F3  8D 80 00000D28 R *	    lea    eax, outbuffer[eax]
 000005F9  50		   *	    push   eax
 000005FA  8D 86 0000043C R *	    lea    eax, State[esi]
 00000600  50		   *	    push   eax
 00000601  E8 FFFFF9FA	   *	    call   pSwap
 00000606  58						pop eax

 00000607  46						inc esi
 00000608  40						inc eax
 00000609  E2 E7					loop l90

 0000060B  5E					pop esi
 0000060C  59					pop ecx
 0000060D  46					inc esi
 0000060E  E2 C3				loop l8257


						; Read out to the file
						invoke pFileO
 00000610  E8 FFFFFF69	   *	    call   pFileO

 00000615  C3				ret
 00000616			pEncrypt ENDP


				;----------------------------------------------------
 00000616			pDecrypt PROC
				;----------------------------------------------------
					invoke pExpandKey
 00000616  E8 FFFFFC27	   *	    call   pExpandKey
					invoke pFileI
 0000061B  E8 FFFFFF3A	   *	    call   pFileI

 00000620  8B 0D 00001680 R		mov ecx, sizeoffile
 00000626  C1 E9 04			shr ecx, 4         ; divide by 16
 00000629  41				inc ecx

 0000062A  BE 00000000			mov esi, 0
 0000062F				l91: 
 0000062F  51					push ecx
 00000630  8B C6				mov eax, esi
 00000632  6B C0 10				imul eax, 16
 00000635  50					push eax
 00000636  56					push esi
						invoke pDecryptBlock, ADDR inbuffer[eax]
 00000637  8D 80 00000528 R *	    lea    eax, inbuffer[eax]
 0000063D  50		   *	    push   eax
 0000063E  E8 FFFFFEB8	   *	    call   pDecryptBlock
 00000643  5E					pop esi
 00000644  58					pop eax

 00000645  51					push ecx
 00000646  56					push esi

 00000647  B9 00000010				mov ecx, 16
 0000064C  BE 00000000				mov esi, 0
 00000651					l87:
 00000651  50						push eax
							invoke pSwap, ADDR State[esi], ADDR outbuffer[eax]
 00000652  8D 80 00000D28 R *	    lea    eax, outbuffer[eax]
 00000658  50		   *	    push   eax
 00000659  8D 86 0000043C R *	    lea    eax, State[esi]
 0000065F  50		   *	    push   eax
 00000660  E8 FFFFF99B	   *	    call   pSwap
 00000665  58						pop eax

 00000666  46						inc esi
 00000667  40						inc eax
 00000668  E2 E7					loop l87

 0000066A  5E					pop esi
 0000066B  59					pop ecx
 0000066C  46					inc esi
 0000066D  59					pop ecx
 0000066E  E2 BF				loop l91

						invoke pFileO
 00000670  E8 FFFFFF09	   *	    call   pFileO

 00000675  C3				ret
 00000676			pDecrypt ENDP


				;----------------------------------------------------
 00000676			pMenu PROC
				;----------------------------------------------------

 00000676				l75:
 00000676  BA 00001684 R			mov edx, OFFSET menu
 0000067B  E8 00000000 E			call WriteString
 00000680  E8 00000000 E			call ReadInt
 00000685  50					push eax

						.IF eax != 1 && eax != 2
 00000686  83 F8 01	   *	    cmp    eax, 001h
 00000689  74 0C	   *	    je	@C0005
 0000068B  83 F8 02	   *	    cmp    eax, 002h
 0000068E  74 07	   *	    je	@C0005
							exit
 00000690  6A 00	   *	    push   +000000000h
 00000692  E8 00000000 E   *	    call   ExitProcess
						.ENDIF
 00000697		   *@C0005:

 00000697  BA 00001628 R			mov edx, OFFSET inmsg
 0000069C  E8 00000000 E			call WriteString
 000006A1  BA 00001528 R			mov edx, OFFSET infile
 000006A6  B9 00000100				mov ecx, 256
 000006AB  E8 00000000 E			call ReadString

 000006B0  BA 00001652 R			mov edx, OFFSET keymsg
 000006B5  E8 00000000 E			call WriteString
 000006BA  BA 00000468 R			mov edx, OFFSET key
 000006BF  B9 00000010				mov ecx, 16
 000006C4  E8 00000000 E			call ReadString

 000006C9  BA 00001662 R			mov edx, OFFSET filesizemsg
 000006CE  E8 00000000 E			call WriteString
 000006D3  E8 00000000 E			call Readint
 000006D8  A3 00001680 R			mov sizeoffile, eax


 000006DD  58					pop eax
						.IF eax == 1
 000006DE  83 F8 01	   *	    cmp    eax, 001h
 000006E1  75 07	   *	    jne    @C0008
							invoke pEncrypt
 000006E3  E8 FFFFFEBA	   *	    call   pEncrypt
						.ELSEIF eax == 2
 000006E8  EB 0A	   *	    jmp    @C000A
 000006EA		   *@C0008:
 000006EA  83 F8 02	   *	    cmp    eax, 002h
 000006ED  75 05	   *	    jne    @C000B
							invoke pDecrypt
 000006EF  E8 FFFFFF22	   *	    call   pDecrypt
						.ENDIF
 000006F4		   *@C000B:
 000006F4		   *@C000A:

 000006F4  E8 00000000 E			call clrscr
 000006F9  E9 FFFFFF78				jmp l75
 000006FE  C3				ret
 000006FF			pMENU ENDP

 000006FF			main PROC
					;invoke pExpandkey                ; Expanding the key works.
					;invoke pEncryptBlock, ADDR inbuffer[0]
					;invoke pDecryptBlock, ADDR outbuffer[0]

					invoke pMenu
 000006FF  E8 FFFFFF72	   *	    call   pMenu


					; problem with decrypting the last 16 bytes
					
					;call Dumpregs

					exit
 00000704  6A 00	   *	    push   +000000000h
 00000706  E8 00000000 E   *	    call   ExitProcess
 0000070B			main ENDP




				END main
Microsoft (R) Macro Assembler Version 14.00.23026.0	    12/16/15 12:48:32
AddTwo.asm						     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 000016A9 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 0000070B Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 000006FF _TEXT	Length= 0000000C Public STDCALL
pAddExpKey . . . . . . . . . . .	P Near	 0000022B _TEXT	Length= 00000017 Public STDCALL
  L16  . . . . . . . . . . . . .	L Near	 00000234 _TEXT	
pAddRoundKey . . . . . . . . . .	P Near	 000002C4 _TEXT	Length= 0000001D Public STDCALL
  L1 . . . . . . . . . . . . . .	L Near	 000002CF _TEXT	
pByteSubInv  . . . . . . . . . .	P Near	 00000305 _TEXT	Length= 00000024 Public STDCALL
  L2 . . . . . . . . . . . . . .	L Near	 0000030B _TEXT	
pByteSub . . . . . . . . . . . .	P Near	 000002E1 _TEXT	Length= 00000024 Public STDCALL
  L2 . . . . . . . . . . . . . .	L Near	 000002E7 _TEXT	
pDecryptBlock  . . . . . . . . .	P Near	 000004FB _TEXT	Length= 0000005F Public STDCALL
  blockAdd . . . . . . . . . . .	DWord	 bp + 00000008
  l7437  . . . . . . . . . . . .	L Near	 00000508 _TEXT	
  l2163  . . . . . . . . . . . .	L Near	 00000527 _TEXT	
pDecrypt . . . . . . . . . . . .	P Near	 00000616 _TEXT	Length= 00000060 Public STDCALL
  l91  . . . . . . . . . . . . .	L Near	 0000062F _TEXT	
  l87  . . . . . . . . . . . . .	L Near	 00000651 _TEXT	
pEK  . . . . . . . . . . . . . .	P Near	 000001F6 _TEXT	Length= 00000035 Public STDCALL
  a  . . . . . . . . . . . . . .	Byte	 bp + 00000008
pEncryptBlock  . . . . . . . . .	P Near	 00000492 _TEXT	Length= 00000069 Public STDCALL
  blockAdd . . . . . . . . . . .	DWord	 bp + 00000008
  l5690  . . . . . . . . . . . .	L Near	 000004A1 _TEXT	
  l8902  . . . . . . . . . . . .	L Near	 000004C5 _TEXT	
pEncrypt . . . . . . . . . . . .	P Near	 000005A2 _TEXT	Length= 00000074 Public STDCALL
  l8257  . . . . . . . . . . . .	L Near	 000005D3 _TEXT	
  l90  . . . . . . . . . . . . .	L Near	 000005F2 _TEXT	
pExpandKey . . . . . . . . . . .	P Near	 00000242 _TEXT	Length= 00000082 Public STDCALL
  l5 . . . . . . . . . . . . . .	L Near	 0000024C _TEXT	
  l3 . . . . . . . . . . . . . .	L Near	 00000265 _TEXT	
  l32  . . . . . . . . . . . . .	L Near	 000002A3 _TEXT	
pFileI . . . . . . . . . . . . .	P Near	 0000055A _TEXT	Length= 00000024 Public STDCALL
pFileO . . . . . . . . . . . . .	P Near	 0000057E _TEXT	Length= 00000024 Public STDCALL
pMenu  . . . . . . . . . . . . .	P Near	 00000676 _TEXT	Length= 00000089 Public STDCALL
  l75  . . . . . . . . . . . . .	L Near	 00000676 _TEXT	
pMixColInv . . . . . . . . . . .	P Near	 000003A2 _TEXT	Length= 000000F0 Public STDCALL
  loop2  . . . . . . . . . . . .	L Near	 000003C1 _TEXT	
  loop1  . . . . . . . . . . . .	L Near	 000003CD _TEXT	
  L2 . . . . . . . . . . . . . .	L Near	 00000475 _TEXT	
pMixCol  . . . . . . . . . . . .	P Near	 00000106 _TEXT	Length= 000000F0 Public STDCALL
  loop2  . . . . . . . . . . . .	L Near	 00000125 _TEXT	
  loop1  . . . . . . . . . . . .	L Near	 00000131 _TEXT	
  L2 . . . . . . . . . . . . . .	L Near	 000001D9 _TEXT	
pMultGalois  . . . . . . . . . .	P Near	 000000B7 _TEXT	Length= 0000004F Public STDCALL
  a  . . . . . . . . . . . . . .	Byte	 bp + 00000008
  b  . . . . . . . . . . . . . .	Byte	 bp + 0000000C
  quit . . . . . . . . . . . . .	L Near	 000000FF _TEXT	
pShiftRowInv . . . . . . . . . .	P Near	 00000329 _TEXT	Length= 00000079 Public STDCALL
pShiftRow  . . . . . . . . . . .	P Near	 0000003E _TEXT	Length= 00000079 Public STDCALL
pSubWord . . . . . . . . . . . .	P Near	 0000001D _TEXT	Length= 00000021 Public STDCALL
  l2 . . . . . . . . . . . . . .	L Near	 00000024 _TEXT	
pSwap  . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 0000001D Public STDCALL
  y  . . . . . . . . . . . . . .	DWord	 bp + 00000008
  x  . . . . . . . . . . . . . .	DWord	 bp + 0000000C
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILESIZE . . . . . . . . . . . .	Number	 00000800h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
Rcon . . . . . . . . . . . . . .	DWord	 00000400 _DATA	
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
State  . . . . . . . . . . . . .	Byte	 0000043C _DATA	
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
cyan . . . . . . . . . . . . . .	Number	 00000003h   
etable . . . . . . . . . . . . .	Byte	 00000200 _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
expKey . . . . . . . . . . . . .	Byte	 00000478 _DATA	
filesizemsg  . . . . . . . . . .	Byte	 00001662 _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
inbuffer . . . . . . . . . . . .	Byte	 00000528 _DATA	
infile . . . . . . . . . . . . .	Byte	 00001528 _DATA	
inmsg  . . . . . . . . . . . . .	Byte	 00001628 _DATA	
keymsg . . . . . . . . . . . . .	Byte	 00001652 _DATA	
keytest  . . . . . . . . . . . .	Byte	 00000464 _DATA	
key  . . . . . . . . . . . . . .	Byte	 00000468 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
ltable . . . . . . . . . . . . .	Byte	 00000300 _DATA	
magenta  . . . . . . . . . . . .	Number	 00000005h   
matrixinv  . . . . . . . . . . .	Byte	 00000460 _DATA	
matrix . . . . . . . . . . . . .	Byte	 0000045C _DATA	
menu . . . . . . . . . . . . . .	Byte	 00001684 _DATA	
outbuffer  . . . . . . . . . . .	Byte	 00000D28 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
sboxinv  . . . . . . . . . . . .	Byte	 00000100 _DATA	
sbox . . . . . . . . . . . . . .	Byte	 00000000 _DATA	
sizeoffile . . . . . . . . . . .	DWord	 00001680 _DATA	
temp . . . . . . . . . . . . . .	Byte	 0000044C _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
